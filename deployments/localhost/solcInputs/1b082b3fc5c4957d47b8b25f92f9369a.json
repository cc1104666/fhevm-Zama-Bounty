{
  "language": "Solidity",
  "sources": {
    "@fhevm/solidity/config/ZamaConfig.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause-Clear\npragma solidity ^0.8.24;\n\nimport {SepoliaZamaOracleAddress} from \"@zama-fhe/oracle-solidity/address/ZamaOracleAddress.sol\";\nimport {FHE} from \"@fhevm/solidity/lib/FHE.sol\";\nimport {CoprocessorConfig} from \"@fhevm/solidity/lib/Impl.sol\";\n\n/**\n * @title   ZamaConfig.\n * @notice  This library returns the FHEVM config for different networks\n *          with the contract addresses for (1) ACL, (2) CoprocessorAddress, (3) DecryptionOracleAddress, (4) KMSVerifier,\n *          which are deployed & maintained by Zama. It also returns the address of the decryption oracle.\n */\nlibrary ZamaConfig {\n    function getSepoliaProtocolId() internal pure returns (uint256) {\n        /// @note Zama Ethereum Sepolia protocol id is '10000 + Zama Ethereum protocol id'\n        return 10001;\n    }\n\n    function getSepoliaConfig() internal pure returns (CoprocessorConfig memory) {\n        return\n            CoprocessorConfig({\n                ACLAddress: 0x50157CFfD6bBFA2DECe204a89ec419c23ef5755D,\n                CoprocessorAddress: 0xCD3ab3bd6bcc0c0bf3E27912a92043e817B1cf69,\n                DecryptionOracleAddress: SepoliaZamaOracleAddress,\n                KMSVerifierAddress: 0x1364cBBf2cDF5032C47d8226a6f6FBD2AFCDacAC\n            });\n    }\n\n    function getEthereumProtocolId() internal pure returns (uint256) {\n        /// @note Zama Ethereum protocol id is '1'\n        return 1;\n    }\n\n    function getEthereumConfig() internal pure returns (CoprocessorConfig memory) {\n        /// @note The addresses below are placeholders and should be replaced with actual addresses\n        /// once deployed on the Ethereum mainnet.\n        return\n            CoprocessorConfig({\n                ACLAddress: address(0),\n                CoprocessorAddress: address(0),\n                DecryptionOracleAddress: address(0),\n                KMSVerifierAddress: address(0)\n            });\n    }\n}\n\n/**\n * @title   SepoliaConfig.\n * @dev     This contract can be inherited by a contract wishing to use the FHEVM contracts provided by Zama\n *          on the Sepolia network (chainId = 11155111).\n *          Other providers may offer similar contracts deployed at different addresses.\n *          If you wish to use them, you should rely on the instructions from these providers.\n */\ncontract SepoliaConfig {\n    constructor() {\n        FHE.setCoprocessor(ZamaConfig.getSepoliaConfig());\n    }\n\n    function protocolId() public pure returns (uint256) {\n        return ZamaConfig.getSepoliaProtocolId();\n    }\n}\n\n/**\n * @title   EthereumConfig.\n * @dev     This contract can be inherited by a contract wishing to use the FHEVM contracts provided by Zama\n *          on the Ethereum (mainnet) network (chainId = 1).\n *          Other providers may offer similar contracts deployed at different addresses.\n *          If you wish to use them, you should rely on the instructions from these providers.\n */\ncontract EthereumConfig {\n    constructor() {\n        FHE.setCoprocessor(ZamaConfig.getEthereumConfig());\n    }\n\n    function protocolId() public pure returns (uint256) {\n        return ZamaConfig.getEthereumProtocolId();\n    }\n}\n"
    },
    "@fhevm/solidity/lib/FHE.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause-Clear\npragma solidity ^0.8.24;\n\nimport \"./Impl.sol\";\nimport {FheType} from \"./FheType.sol\";\n\nimport \"encrypted-types/EncryptedTypes.sol\";\n\n/**\n * @title IKMSVerifier\n * @notice This interface contains the only function required from KMSVerifier.\n */\ninterface IKMSVerifier {\n    function verifyDecryptionEIP712KMSSignatures(\n        bytes32[] memory handlesList,\n        bytes memory decryptedResult,\n        bytes memory decryptionProof\n    ) external returns (bool);\n}\n\n/**\n * @title IDecryptionOracle\n * @notice This interface contains the only function required from DecryptionOracle.\n */\ninterface IDecryptionOracle {\n    function requestDecryption(\n        uint256 requestID,\n        bytes32[] calldata ctsHandles,\n        bytes4 callbackSelector\n    ) external payable;\n}\n\n/**\n * @title   FHE\n * @notice  This library is the interaction point for all smart contract developers\n *          that interact with the FHEVM protocol.\n */\nlibrary FHE {\n    /// @notice Returned if some handles were already saved for corresponding ID.\n    error HandlesAlreadySavedForRequestID();\n\n    /// @notice Returned if there was not handle found for the requested ID.\n    error NoHandleFoundForRequestID();\n\n    /// @notice Returned if the returned KMS signatures are not valid.\n    error InvalidKMSSignatures();\n\n    /// @notice This event is emitted when requested decryption has been fulfilled.\n    event DecryptionFulfilled(uint256 indexed requestID);\n\n    /**\n     * @notice                  Sets the coprocessor addresses.\n     * @param coprocessorConfig Coprocessor config struct that contains contract addresses.\n     */\n    function setCoprocessor(CoprocessorConfig memory coprocessorConfig) internal {\n        Impl.setCoprocessor(coprocessorConfig);\n    }\n\n    /**\n     * @dev Returns true if the encrypted integer is initialized and false otherwise.\n     */\n    function isInitialized(ebool v) internal pure returns (bool) {\n        return ebool.unwrap(v) != 0;\n    }\n\n    /**\n     * @dev Returns true if the encrypted integer is initialized and false otherwise.\n     */\n    function isInitialized(euint8 v) internal pure returns (bool) {\n        return euint8.unwrap(v) != 0;\n    }\n\n    /**\n     * @dev Returns true if the encrypted integer is initialized and false otherwise.\n     */\n    function isInitialized(euint16 v) internal pure returns (bool) {\n        return euint16.unwrap(v) != 0;\n    }\n\n    /**\n     * @dev Returns true if the encrypted integer is initialized and false otherwise.\n     */\n    function isInitialized(euint32 v) internal pure returns (bool) {\n        return euint32.unwrap(v) != 0;\n    }\n\n    /**\n     * @dev Returns true if the encrypted integer is initialized and false otherwise.\n     */\n    function isInitialized(euint64 v) internal pure returns (bool) {\n        return euint64.unwrap(v) != 0;\n    }\n\n    /**\n     * @dev Returns true if the encrypted integer is initialized and false otherwise.\n     */\n    function isInitialized(euint128 v) internal pure returns (bool) {\n        return euint128.unwrap(v) != 0;\n    }\n\n    /**\n     * @dev Returns true if the encrypted integer is initialized and false otherwise.\n     */\n    function isInitialized(eaddress v) internal pure returns (bool) {\n        return eaddress.unwrap(v) != 0;\n    }\n\n    /**\n     * @dev Returns true if the encrypted integer is initialized and false otherwise.\n     */\n    function isInitialized(euint256 v) internal pure returns (bool) {\n        return euint256.unwrap(v) != 0;\n    }\n\n    /**\n     * @dev Evaluates and(ebool a, ebool b) and returns the result.\n     */\n    function and(ebool a, ebool b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEbool(false);\n        }\n        if (!isInitialized(b)) {\n            b = asEbool(false);\n        }\n        return ebool.wrap(Impl.and(ebool.unwrap(a), ebool.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates or(ebool a, ebool b) and returns the result.\n     */\n    function or(ebool a, ebool b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEbool(false);\n        }\n        if (!isInitialized(b)) {\n            b = asEbool(false);\n        }\n        return ebool.wrap(Impl.or(ebool.unwrap(a), ebool.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates xor(ebool a, ebool b) and returns the result.\n     */\n    function xor(ebool a, ebool b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEbool(false);\n        }\n        if (!isInitialized(b)) {\n            b = asEbool(false);\n        }\n        return ebool.wrap(Impl.xor(ebool.unwrap(a), ebool.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates eq(ebool a, ebool b) and returns the result.\n     */\n    function eq(ebool a, ebool b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEbool(false);\n        }\n        if (!isInitialized(b)) {\n            b = asEbool(false);\n        }\n        return ebool.wrap(Impl.eq(ebool.unwrap(a), ebool.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ne(ebool a, ebool b) and returns the result.\n     */\n    function ne(ebool a, ebool b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEbool(false);\n        }\n        if (!isInitialized(b)) {\n            b = asEbool(false);\n        }\n        return ebool.wrap(Impl.ne(ebool.unwrap(a), ebool.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates add(euint8 a, euint8 b)  and returns the result.\n     */\n    function add(euint8 a, euint8 b) internal returns (euint8) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint8.wrap(Impl.add(euint8.unwrap(a), euint8.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates sub(euint8 a, euint8 b)  and returns the result.\n     */\n    function sub(euint8 a, euint8 b) internal returns (euint8) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint8.wrap(Impl.sub(euint8.unwrap(a), euint8.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates mul(euint8 a, euint8 b)  and returns the result.\n     */\n    function mul(euint8 a, euint8 b) internal returns (euint8) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint8.wrap(Impl.mul(euint8.unwrap(a), euint8.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint8 a, euint8 b)  and returns the result.\n     */\n    function and(euint8 a, euint8 b) internal returns (euint8) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint8.wrap(Impl.and(euint8.unwrap(a), euint8.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint8 a, euint8 b)  and returns the result.\n     */\n    function or(euint8 a, euint8 b) internal returns (euint8) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint8.wrap(Impl.or(euint8.unwrap(a), euint8.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint8 a, euint8 b)  and returns the result.\n     */\n    function xor(euint8 a, euint8 b) internal returns (euint8) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint8.wrap(Impl.xor(euint8.unwrap(a), euint8.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint8 a, euint8 b)  and returns the result.\n     */\n    function eq(euint8 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.eq(euint8.unwrap(a), euint8.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint8 a, euint8 b)  and returns the result.\n     */\n    function ne(euint8 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.ne(euint8.unwrap(a), euint8.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ge(euint8 a, euint8 b)  and returns the result.\n     */\n    function ge(euint8 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.ge(euint8.unwrap(a), euint8.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates gt(euint8 a, euint8 b)  and returns the result.\n     */\n    function gt(euint8 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.gt(euint8.unwrap(a), euint8.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates le(euint8 a, euint8 b)  and returns the result.\n     */\n    function le(euint8 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.le(euint8.unwrap(a), euint8.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates lt(euint8 a, euint8 b)  and returns the result.\n     */\n    function lt(euint8 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.lt(euint8.unwrap(a), euint8.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates min(euint8 a, euint8 b)  and returns the result.\n     */\n    function min(euint8 a, euint8 b) internal returns (euint8) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint8.wrap(Impl.min(euint8.unwrap(a), euint8.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates max(euint8 a, euint8 b)  and returns the result.\n     */\n    function max(euint8 a, euint8 b) internal returns (euint8) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint8.wrap(Impl.max(euint8.unwrap(a), euint8.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates add(euint8 a, euint16 b)  and returns the result.\n     */\n    function add(euint8 a, euint16 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint16.wrap(Impl.add(euint16.unwrap(asEuint16(a)), euint16.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates sub(euint8 a, euint16 b)  and returns the result.\n     */\n    function sub(euint8 a, euint16 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint16.wrap(Impl.sub(euint16.unwrap(asEuint16(a)), euint16.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates mul(euint8 a, euint16 b)  and returns the result.\n     */\n    function mul(euint8 a, euint16 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint16.wrap(Impl.mul(euint16.unwrap(asEuint16(a)), euint16.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint8 a, euint16 b)  and returns the result.\n     */\n    function and(euint8 a, euint16 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint16.wrap(Impl.and(euint16.unwrap(asEuint16(a)), euint16.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint8 a, euint16 b)  and returns the result.\n     */\n    function or(euint8 a, euint16 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint16.wrap(Impl.or(euint16.unwrap(asEuint16(a)), euint16.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint8 a, euint16 b)  and returns the result.\n     */\n    function xor(euint8 a, euint16 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint16.wrap(Impl.xor(euint16.unwrap(asEuint16(a)), euint16.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint8 a, euint16 b)  and returns the result.\n     */\n    function eq(euint8 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.eq(euint16.unwrap(asEuint16(a)), euint16.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint8 a, euint16 b)  and returns the result.\n     */\n    function ne(euint8 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.ne(euint16.unwrap(asEuint16(a)), euint16.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ge(euint8 a, euint16 b)  and returns the result.\n     */\n    function ge(euint8 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.ge(euint16.unwrap(asEuint16(a)), euint16.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates gt(euint8 a, euint16 b)  and returns the result.\n     */\n    function gt(euint8 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.gt(euint16.unwrap(asEuint16(a)), euint16.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates le(euint8 a, euint16 b)  and returns the result.\n     */\n    function le(euint8 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.le(euint16.unwrap(asEuint16(a)), euint16.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates lt(euint8 a, euint16 b)  and returns the result.\n     */\n    function lt(euint8 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.lt(euint16.unwrap(asEuint16(a)), euint16.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates min(euint8 a, euint16 b)  and returns the result.\n     */\n    function min(euint8 a, euint16 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint16.wrap(Impl.min(euint16.unwrap(asEuint16(a)), euint16.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates max(euint8 a, euint16 b)  and returns the result.\n     */\n    function max(euint8 a, euint16 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint16.wrap(Impl.max(euint16.unwrap(asEuint16(a)), euint16.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates add(euint8 a, euint32 b)  and returns the result.\n     */\n    function add(euint8 a, euint32 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint32.wrap(Impl.add(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates sub(euint8 a, euint32 b)  and returns the result.\n     */\n    function sub(euint8 a, euint32 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint32.wrap(Impl.sub(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates mul(euint8 a, euint32 b)  and returns the result.\n     */\n    function mul(euint8 a, euint32 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint32.wrap(Impl.mul(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint8 a, euint32 b)  and returns the result.\n     */\n    function and(euint8 a, euint32 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint32.wrap(Impl.and(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint8 a, euint32 b)  and returns the result.\n     */\n    function or(euint8 a, euint32 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint32.wrap(Impl.or(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint8 a, euint32 b)  and returns the result.\n     */\n    function xor(euint8 a, euint32 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint32.wrap(Impl.xor(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint8 a, euint32 b)  and returns the result.\n     */\n    function eq(euint8 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.eq(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint8 a, euint32 b)  and returns the result.\n     */\n    function ne(euint8 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.ne(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ge(euint8 a, euint32 b)  and returns the result.\n     */\n    function ge(euint8 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.ge(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates gt(euint8 a, euint32 b)  and returns the result.\n     */\n    function gt(euint8 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.gt(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates le(euint8 a, euint32 b)  and returns the result.\n     */\n    function le(euint8 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.le(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates lt(euint8 a, euint32 b)  and returns the result.\n     */\n    function lt(euint8 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.lt(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates min(euint8 a, euint32 b)  and returns the result.\n     */\n    function min(euint8 a, euint32 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint32.wrap(Impl.min(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates max(euint8 a, euint32 b)  and returns the result.\n     */\n    function max(euint8 a, euint32 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint32.wrap(Impl.max(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates add(euint8 a, euint64 b)  and returns the result.\n     */\n    function add(euint8 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.add(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates sub(euint8 a, euint64 b)  and returns the result.\n     */\n    function sub(euint8 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.sub(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates mul(euint8 a, euint64 b)  and returns the result.\n     */\n    function mul(euint8 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.mul(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint8 a, euint64 b)  and returns the result.\n     */\n    function and(euint8 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.and(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint8 a, euint64 b)  and returns the result.\n     */\n    function or(euint8 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.or(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint8 a, euint64 b)  and returns the result.\n     */\n    function xor(euint8 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.xor(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint8 a, euint64 b)  and returns the result.\n     */\n    function eq(euint8 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.eq(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint8 a, euint64 b)  and returns the result.\n     */\n    function ne(euint8 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.ne(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ge(euint8 a, euint64 b)  and returns the result.\n     */\n    function ge(euint8 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.ge(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates gt(euint8 a, euint64 b)  and returns the result.\n     */\n    function gt(euint8 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.gt(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates le(euint8 a, euint64 b)  and returns the result.\n     */\n    function le(euint8 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.le(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates lt(euint8 a, euint64 b)  and returns the result.\n     */\n    function lt(euint8 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.lt(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates min(euint8 a, euint64 b)  and returns the result.\n     */\n    function min(euint8 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.min(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates max(euint8 a, euint64 b)  and returns the result.\n     */\n    function max(euint8 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.max(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates add(euint8 a, euint128 b)  and returns the result.\n     */\n    function add(euint8 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.add(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates sub(euint8 a, euint128 b)  and returns the result.\n     */\n    function sub(euint8 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.sub(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates mul(euint8 a, euint128 b)  and returns the result.\n     */\n    function mul(euint8 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.mul(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint8 a, euint128 b)  and returns the result.\n     */\n    function and(euint8 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.and(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint8 a, euint128 b)  and returns the result.\n     */\n    function or(euint8 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.or(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint8 a, euint128 b)  and returns the result.\n     */\n    function xor(euint8 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.xor(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint8 a, euint128 b)  and returns the result.\n     */\n    function eq(euint8 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.eq(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint8 a, euint128 b)  and returns the result.\n     */\n    function ne(euint8 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.ne(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ge(euint8 a, euint128 b)  and returns the result.\n     */\n    function ge(euint8 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.ge(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates gt(euint8 a, euint128 b)  and returns the result.\n     */\n    function gt(euint8 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.gt(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates le(euint8 a, euint128 b)  and returns the result.\n     */\n    function le(euint8 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.le(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates lt(euint8 a, euint128 b)  and returns the result.\n     */\n    function lt(euint8 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.lt(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates min(euint8 a, euint128 b)  and returns the result.\n     */\n    function min(euint8 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.min(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates max(euint8 a, euint128 b)  and returns the result.\n     */\n    function max(euint8 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.max(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint8 a, euint256 b)  and returns the result.\n     */\n    function and(euint8 a, euint256 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return euint256.wrap(Impl.and(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint8 a, euint256 b)  and returns the result.\n     */\n    function or(euint8 a, euint256 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return euint256.wrap(Impl.or(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint8 a, euint256 b)  and returns the result.\n     */\n    function xor(euint8 a, euint256 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return euint256.wrap(Impl.xor(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint8 a, euint256 b)  and returns the result.\n     */\n    function eq(euint8 a, euint256 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return ebool.wrap(Impl.eq(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint8 a, euint256 b)  and returns the result.\n     */\n    function ne(euint8 a, euint256 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return ebool.wrap(Impl.ne(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates add(euint16 a, euint8 b)  and returns the result.\n     */\n    function add(euint16 a, euint8 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint16.wrap(Impl.add(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\n    }\n\n    /**\n     * @dev Evaluates sub(euint16 a, euint8 b)  and returns the result.\n     */\n    function sub(euint16 a, euint8 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint16.wrap(Impl.sub(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\n    }\n\n    /**\n     * @dev Evaluates mul(euint16 a, euint8 b)  and returns the result.\n     */\n    function mul(euint16 a, euint8 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint16.wrap(Impl.mul(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint16 a, euint8 b)  and returns the result.\n     */\n    function and(euint16 a, euint8 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint16.wrap(Impl.and(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint16 a, euint8 b)  and returns the result.\n     */\n    function or(euint16 a, euint8 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint16.wrap(Impl.or(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint16 a, euint8 b)  and returns the result.\n     */\n    function xor(euint16 a, euint8 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint16.wrap(Impl.xor(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint16 a, euint8 b)  and returns the result.\n     */\n    function eq(euint16 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.eq(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint16 a, euint8 b)  and returns the result.\n     */\n    function ne(euint16 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.ne(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\n    }\n\n    /**\n     * @dev Evaluates ge(euint16 a, euint8 b)  and returns the result.\n     */\n    function ge(euint16 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.ge(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\n    }\n\n    /**\n     * @dev Evaluates gt(euint16 a, euint8 b)  and returns the result.\n     */\n    function gt(euint16 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.gt(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\n    }\n\n    /**\n     * @dev Evaluates le(euint16 a, euint8 b)  and returns the result.\n     */\n    function le(euint16 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.le(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\n    }\n\n    /**\n     * @dev Evaluates lt(euint16 a, euint8 b)  and returns the result.\n     */\n    function lt(euint16 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.lt(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\n    }\n\n    /**\n     * @dev Evaluates min(euint16 a, euint8 b)  and returns the result.\n     */\n    function min(euint16 a, euint8 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint16.wrap(Impl.min(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\n    }\n\n    /**\n     * @dev Evaluates max(euint16 a, euint8 b)  and returns the result.\n     */\n    function max(euint16 a, euint8 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint16.wrap(Impl.max(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\n    }\n\n    /**\n     * @dev Evaluates add(euint16 a, euint16 b)  and returns the result.\n     */\n    function add(euint16 a, euint16 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint16.wrap(Impl.add(euint16.unwrap(a), euint16.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates sub(euint16 a, euint16 b)  and returns the result.\n     */\n    function sub(euint16 a, euint16 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint16.wrap(Impl.sub(euint16.unwrap(a), euint16.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates mul(euint16 a, euint16 b)  and returns the result.\n     */\n    function mul(euint16 a, euint16 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint16.wrap(Impl.mul(euint16.unwrap(a), euint16.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint16 a, euint16 b)  and returns the result.\n     */\n    function and(euint16 a, euint16 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint16.wrap(Impl.and(euint16.unwrap(a), euint16.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint16 a, euint16 b)  and returns the result.\n     */\n    function or(euint16 a, euint16 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint16.wrap(Impl.or(euint16.unwrap(a), euint16.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint16 a, euint16 b)  and returns the result.\n     */\n    function xor(euint16 a, euint16 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint16.wrap(Impl.xor(euint16.unwrap(a), euint16.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint16 a, euint16 b)  and returns the result.\n     */\n    function eq(euint16 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.eq(euint16.unwrap(a), euint16.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint16 a, euint16 b)  and returns the result.\n     */\n    function ne(euint16 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.ne(euint16.unwrap(a), euint16.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ge(euint16 a, euint16 b)  and returns the result.\n     */\n    function ge(euint16 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.ge(euint16.unwrap(a), euint16.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates gt(euint16 a, euint16 b)  and returns the result.\n     */\n    function gt(euint16 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.gt(euint16.unwrap(a), euint16.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates le(euint16 a, euint16 b)  and returns the result.\n     */\n    function le(euint16 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.le(euint16.unwrap(a), euint16.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates lt(euint16 a, euint16 b)  and returns the result.\n     */\n    function lt(euint16 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.lt(euint16.unwrap(a), euint16.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates min(euint16 a, euint16 b)  and returns the result.\n     */\n    function min(euint16 a, euint16 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint16.wrap(Impl.min(euint16.unwrap(a), euint16.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates max(euint16 a, euint16 b)  and returns the result.\n     */\n    function max(euint16 a, euint16 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint16.wrap(Impl.max(euint16.unwrap(a), euint16.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates add(euint16 a, euint32 b)  and returns the result.\n     */\n    function add(euint16 a, euint32 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint32.wrap(Impl.add(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates sub(euint16 a, euint32 b)  and returns the result.\n     */\n    function sub(euint16 a, euint32 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint32.wrap(Impl.sub(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates mul(euint16 a, euint32 b)  and returns the result.\n     */\n    function mul(euint16 a, euint32 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint32.wrap(Impl.mul(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint16 a, euint32 b)  and returns the result.\n     */\n    function and(euint16 a, euint32 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint32.wrap(Impl.and(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint16 a, euint32 b)  and returns the result.\n     */\n    function or(euint16 a, euint32 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint32.wrap(Impl.or(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint16 a, euint32 b)  and returns the result.\n     */\n    function xor(euint16 a, euint32 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint32.wrap(Impl.xor(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint16 a, euint32 b)  and returns the result.\n     */\n    function eq(euint16 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.eq(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint16 a, euint32 b)  and returns the result.\n     */\n    function ne(euint16 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.ne(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ge(euint16 a, euint32 b)  and returns the result.\n     */\n    function ge(euint16 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.ge(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates gt(euint16 a, euint32 b)  and returns the result.\n     */\n    function gt(euint16 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.gt(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates le(euint16 a, euint32 b)  and returns the result.\n     */\n    function le(euint16 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.le(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates lt(euint16 a, euint32 b)  and returns the result.\n     */\n    function lt(euint16 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.lt(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates min(euint16 a, euint32 b)  and returns the result.\n     */\n    function min(euint16 a, euint32 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint32.wrap(Impl.min(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates max(euint16 a, euint32 b)  and returns the result.\n     */\n    function max(euint16 a, euint32 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint32.wrap(Impl.max(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates add(euint16 a, euint64 b)  and returns the result.\n     */\n    function add(euint16 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.add(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates sub(euint16 a, euint64 b)  and returns the result.\n     */\n    function sub(euint16 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.sub(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates mul(euint16 a, euint64 b)  and returns the result.\n     */\n    function mul(euint16 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.mul(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint16 a, euint64 b)  and returns the result.\n     */\n    function and(euint16 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.and(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint16 a, euint64 b)  and returns the result.\n     */\n    function or(euint16 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.or(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint16 a, euint64 b)  and returns the result.\n     */\n    function xor(euint16 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.xor(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint16 a, euint64 b)  and returns the result.\n     */\n    function eq(euint16 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.eq(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint16 a, euint64 b)  and returns the result.\n     */\n    function ne(euint16 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.ne(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ge(euint16 a, euint64 b)  and returns the result.\n     */\n    function ge(euint16 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.ge(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates gt(euint16 a, euint64 b)  and returns the result.\n     */\n    function gt(euint16 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.gt(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates le(euint16 a, euint64 b)  and returns the result.\n     */\n    function le(euint16 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.le(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates lt(euint16 a, euint64 b)  and returns the result.\n     */\n    function lt(euint16 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.lt(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates min(euint16 a, euint64 b)  and returns the result.\n     */\n    function min(euint16 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.min(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates max(euint16 a, euint64 b)  and returns the result.\n     */\n    function max(euint16 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.max(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates add(euint16 a, euint128 b)  and returns the result.\n     */\n    function add(euint16 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.add(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates sub(euint16 a, euint128 b)  and returns the result.\n     */\n    function sub(euint16 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.sub(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates mul(euint16 a, euint128 b)  and returns the result.\n     */\n    function mul(euint16 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.mul(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint16 a, euint128 b)  and returns the result.\n     */\n    function and(euint16 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.and(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint16 a, euint128 b)  and returns the result.\n     */\n    function or(euint16 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.or(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint16 a, euint128 b)  and returns the result.\n     */\n    function xor(euint16 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.xor(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint16 a, euint128 b)  and returns the result.\n     */\n    function eq(euint16 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.eq(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint16 a, euint128 b)  and returns the result.\n     */\n    function ne(euint16 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.ne(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ge(euint16 a, euint128 b)  and returns the result.\n     */\n    function ge(euint16 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.ge(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates gt(euint16 a, euint128 b)  and returns the result.\n     */\n    function gt(euint16 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.gt(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates le(euint16 a, euint128 b)  and returns the result.\n     */\n    function le(euint16 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.le(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates lt(euint16 a, euint128 b)  and returns the result.\n     */\n    function lt(euint16 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.lt(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates min(euint16 a, euint128 b)  and returns the result.\n     */\n    function min(euint16 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.min(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates max(euint16 a, euint128 b)  and returns the result.\n     */\n    function max(euint16 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.max(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint16 a, euint256 b)  and returns the result.\n     */\n    function and(euint16 a, euint256 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return euint256.wrap(Impl.and(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint16 a, euint256 b)  and returns the result.\n     */\n    function or(euint16 a, euint256 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return euint256.wrap(Impl.or(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint16 a, euint256 b)  and returns the result.\n     */\n    function xor(euint16 a, euint256 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return euint256.wrap(Impl.xor(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint16 a, euint256 b)  and returns the result.\n     */\n    function eq(euint16 a, euint256 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return ebool.wrap(Impl.eq(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint16 a, euint256 b)  and returns the result.\n     */\n    function ne(euint16 a, euint256 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return ebool.wrap(Impl.ne(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates add(euint32 a, euint8 b)  and returns the result.\n     */\n    function add(euint32 a, euint8 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint32.wrap(Impl.add(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\n    }\n\n    /**\n     * @dev Evaluates sub(euint32 a, euint8 b)  and returns the result.\n     */\n    function sub(euint32 a, euint8 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint32.wrap(Impl.sub(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\n    }\n\n    /**\n     * @dev Evaluates mul(euint32 a, euint8 b)  and returns the result.\n     */\n    function mul(euint32 a, euint8 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint32.wrap(Impl.mul(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint32 a, euint8 b)  and returns the result.\n     */\n    function and(euint32 a, euint8 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint32.wrap(Impl.and(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint32 a, euint8 b)  and returns the result.\n     */\n    function or(euint32 a, euint8 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint32.wrap(Impl.or(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint32 a, euint8 b)  and returns the result.\n     */\n    function xor(euint32 a, euint8 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint32.wrap(Impl.xor(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint32 a, euint8 b)  and returns the result.\n     */\n    function eq(euint32 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.eq(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint32 a, euint8 b)  and returns the result.\n     */\n    function ne(euint32 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.ne(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\n    }\n\n    /**\n     * @dev Evaluates ge(euint32 a, euint8 b)  and returns the result.\n     */\n    function ge(euint32 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.ge(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\n    }\n\n    /**\n     * @dev Evaluates gt(euint32 a, euint8 b)  and returns the result.\n     */\n    function gt(euint32 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.gt(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\n    }\n\n    /**\n     * @dev Evaluates le(euint32 a, euint8 b)  and returns the result.\n     */\n    function le(euint32 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.le(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\n    }\n\n    /**\n     * @dev Evaluates lt(euint32 a, euint8 b)  and returns the result.\n     */\n    function lt(euint32 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.lt(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\n    }\n\n    /**\n     * @dev Evaluates min(euint32 a, euint8 b)  and returns the result.\n     */\n    function min(euint32 a, euint8 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint32.wrap(Impl.min(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\n    }\n\n    /**\n     * @dev Evaluates max(euint32 a, euint8 b)  and returns the result.\n     */\n    function max(euint32 a, euint8 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint32.wrap(Impl.max(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\n    }\n\n    /**\n     * @dev Evaluates add(euint32 a, euint16 b)  and returns the result.\n     */\n    function add(euint32 a, euint16 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint32.wrap(Impl.add(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\n    }\n\n    /**\n     * @dev Evaluates sub(euint32 a, euint16 b)  and returns the result.\n     */\n    function sub(euint32 a, euint16 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint32.wrap(Impl.sub(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\n    }\n\n    /**\n     * @dev Evaluates mul(euint32 a, euint16 b)  and returns the result.\n     */\n    function mul(euint32 a, euint16 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint32.wrap(Impl.mul(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint32 a, euint16 b)  and returns the result.\n     */\n    function and(euint32 a, euint16 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint32.wrap(Impl.and(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint32 a, euint16 b)  and returns the result.\n     */\n    function or(euint32 a, euint16 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint32.wrap(Impl.or(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint32 a, euint16 b)  and returns the result.\n     */\n    function xor(euint32 a, euint16 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint32.wrap(Impl.xor(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint32 a, euint16 b)  and returns the result.\n     */\n    function eq(euint32 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.eq(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint32 a, euint16 b)  and returns the result.\n     */\n    function ne(euint32 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.ne(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\n    }\n\n    /**\n     * @dev Evaluates ge(euint32 a, euint16 b)  and returns the result.\n     */\n    function ge(euint32 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.ge(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\n    }\n\n    /**\n     * @dev Evaluates gt(euint32 a, euint16 b)  and returns the result.\n     */\n    function gt(euint32 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.gt(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\n    }\n\n    /**\n     * @dev Evaluates le(euint32 a, euint16 b)  and returns the result.\n     */\n    function le(euint32 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.le(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\n    }\n\n    /**\n     * @dev Evaluates lt(euint32 a, euint16 b)  and returns the result.\n     */\n    function lt(euint32 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.lt(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\n    }\n\n    /**\n     * @dev Evaluates min(euint32 a, euint16 b)  and returns the result.\n     */\n    function min(euint32 a, euint16 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint32.wrap(Impl.min(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\n    }\n\n    /**\n     * @dev Evaluates max(euint32 a, euint16 b)  and returns the result.\n     */\n    function max(euint32 a, euint16 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint32.wrap(Impl.max(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\n    }\n\n    /**\n     * @dev Evaluates add(euint32 a, euint32 b)  and returns the result.\n     */\n    function add(euint32 a, euint32 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint32.wrap(Impl.add(euint32.unwrap(a), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates sub(euint32 a, euint32 b)  and returns the result.\n     */\n    function sub(euint32 a, euint32 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint32.wrap(Impl.sub(euint32.unwrap(a), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates mul(euint32 a, euint32 b)  and returns the result.\n     */\n    function mul(euint32 a, euint32 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint32.wrap(Impl.mul(euint32.unwrap(a), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint32 a, euint32 b)  and returns the result.\n     */\n    function and(euint32 a, euint32 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint32.wrap(Impl.and(euint32.unwrap(a), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint32 a, euint32 b)  and returns the result.\n     */\n    function or(euint32 a, euint32 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint32.wrap(Impl.or(euint32.unwrap(a), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint32 a, euint32 b)  and returns the result.\n     */\n    function xor(euint32 a, euint32 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint32.wrap(Impl.xor(euint32.unwrap(a), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint32 a, euint32 b)  and returns the result.\n     */\n    function eq(euint32 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.eq(euint32.unwrap(a), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint32 a, euint32 b)  and returns the result.\n     */\n    function ne(euint32 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.ne(euint32.unwrap(a), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ge(euint32 a, euint32 b)  and returns the result.\n     */\n    function ge(euint32 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.ge(euint32.unwrap(a), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates gt(euint32 a, euint32 b)  and returns the result.\n     */\n    function gt(euint32 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.gt(euint32.unwrap(a), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates le(euint32 a, euint32 b)  and returns the result.\n     */\n    function le(euint32 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.le(euint32.unwrap(a), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates lt(euint32 a, euint32 b)  and returns the result.\n     */\n    function lt(euint32 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.lt(euint32.unwrap(a), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates min(euint32 a, euint32 b)  and returns the result.\n     */\n    function min(euint32 a, euint32 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint32.wrap(Impl.min(euint32.unwrap(a), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates max(euint32 a, euint32 b)  and returns the result.\n     */\n    function max(euint32 a, euint32 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint32.wrap(Impl.max(euint32.unwrap(a), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates add(euint32 a, euint64 b)  and returns the result.\n     */\n    function add(euint32 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.add(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates sub(euint32 a, euint64 b)  and returns the result.\n     */\n    function sub(euint32 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.sub(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates mul(euint32 a, euint64 b)  and returns the result.\n     */\n    function mul(euint32 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.mul(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint32 a, euint64 b)  and returns the result.\n     */\n    function and(euint32 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.and(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint32 a, euint64 b)  and returns the result.\n     */\n    function or(euint32 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.or(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint32 a, euint64 b)  and returns the result.\n     */\n    function xor(euint32 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.xor(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint32 a, euint64 b)  and returns the result.\n     */\n    function eq(euint32 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.eq(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint32 a, euint64 b)  and returns the result.\n     */\n    function ne(euint32 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.ne(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ge(euint32 a, euint64 b)  and returns the result.\n     */\n    function ge(euint32 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.ge(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates gt(euint32 a, euint64 b)  and returns the result.\n     */\n    function gt(euint32 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.gt(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates le(euint32 a, euint64 b)  and returns the result.\n     */\n    function le(euint32 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.le(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates lt(euint32 a, euint64 b)  and returns the result.\n     */\n    function lt(euint32 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.lt(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates min(euint32 a, euint64 b)  and returns the result.\n     */\n    function min(euint32 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.min(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates max(euint32 a, euint64 b)  and returns the result.\n     */\n    function max(euint32 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.max(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates add(euint32 a, euint128 b)  and returns the result.\n     */\n    function add(euint32 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.add(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates sub(euint32 a, euint128 b)  and returns the result.\n     */\n    function sub(euint32 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.sub(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates mul(euint32 a, euint128 b)  and returns the result.\n     */\n    function mul(euint32 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.mul(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint32 a, euint128 b)  and returns the result.\n     */\n    function and(euint32 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.and(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint32 a, euint128 b)  and returns the result.\n     */\n    function or(euint32 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.or(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint32 a, euint128 b)  and returns the result.\n     */\n    function xor(euint32 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.xor(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint32 a, euint128 b)  and returns the result.\n     */\n    function eq(euint32 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.eq(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint32 a, euint128 b)  and returns the result.\n     */\n    function ne(euint32 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.ne(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ge(euint32 a, euint128 b)  and returns the result.\n     */\n    function ge(euint32 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.ge(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates gt(euint32 a, euint128 b)  and returns the result.\n     */\n    function gt(euint32 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.gt(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates le(euint32 a, euint128 b)  and returns the result.\n     */\n    function le(euint32 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.le(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates lt(euint32 a, euint128 b)  and returns the result.\n     */\n    function lt(euint32 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.lt(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates min(euint32 a, euint128 b)  and returns the result.\n     */\n    function min(euint32 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.min(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates max(euint32 a, euint128 b)  and returns the result.\n     */\n    function max(euint32 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.max(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint32 a, euint256 b)  and returns the result.\n     */\n    function and(euint32 a, euint256 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return euint256.wrap(Impl.and(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint32 a, euint256 b)  and returns the result.\n     */\n    function or(euint32 a, euint256 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return euint256.wrap(Impl.or(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint32 a, euint256 b)  and returns the result.\n     */\n    function xor(euint32 a, euint256 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return euint256.wrap(Impl.xor(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint32 a, euint256 b)  and returns the result.\n     */\n    function eq(euint32 a, euint256 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return ebool.wrap(Impl.eq(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint32 a, euint256 b)  and returns the result.\n     */\n    function ne(euint32 a, euint256 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return ebool.wrap(Impl.ne(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates add(euint64 a, euint8 b)  and returns the result.\n     */\n    function add(euint64 a, euint8 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint64.wrap(Impl.add(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates sub(euint64 a, euint8 b)  and returns the result.\n     */\n    function sub(euint64 a, euint8 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint64.wrap(Impl.sub(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates mul(euint64 a, euint8 b)  and returns the result.\n     */\n    function mul(euint64 a, euint8 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint64.wrap(Impl.mul(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint64 a, euint8 b)  and returns the result.\n     */\n    function and(euint64 a, euint8 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint64.wrap(Impl.and(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint64 a, euint8 b)  and returns the result.\n     */\n    function or(euint64 a, euint8 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint64.wrap(Impl.or(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint64 a, euint8 b)  and returns the result.\n     */\n    function xor(euint64 a, euint8 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint64.wrap(Impl.xor(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint64 a, euint8 b)  and returns the result.\n     */\n    function eq(euint64 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.eq(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint64 a, euint8 b)  and returns the result.\n     */\n    function ne(euint64 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.ne(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates ge(euint64 a, euint8 b)  and returns the result.\n     */\n    function ge(euint64 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.ge(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates gt(euint64 a, euint8 b)  and returns the result.\n     */\n    function gt(euint64 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.gt(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates le(euint64 a, euint8 b)  and returns the result.\n     */\n    function le(euint64 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.le(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates lt(euint64 a, euint8 b)  and returns the result.\n     */\n    function lt(euint64 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.lt(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates min(euint64 a, euint8 b)  and returns the result.\n     */\n    function min(euint64 a, euint8 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint64.wrap(Impl.min(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates max(euint64 a, euint8 b)  and returns the result.\n     */\n    function max(euint64 a, euint8 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint64.wrap(Impl.max(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates add(euint64 a, euint16 b)  and returns the result.\n     */\n    function add(euint64 a, euint16 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint64.wrap(Impl.add(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates sub(euint64 a, euint16 b)  and returns the result.\n     */\n    function sub(euint64 a, euint16 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint64.wrap(Impl.sub(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates mul(euint64 a, euint16 b)  and returns the result.\n     */\n    function mul(euint64 a, euint16 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint64.wrap(Impl.mul(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint64 a, euint16 b)  and returns the result.\n     */\n    function and(euint64 a, euint16 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint64.wrap(Impl.and(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint64 a, euint16 b)  and returns the result.\n     */\n    function or(euint64 a, euint16 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint64.wrap(Impl.or(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint64 a, euint16 b)  and returns the result.\n     */\n    function xor(euint64 a, euint16 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint64.wrap(Impl.xor(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint64 a, euint16 b)  and returns the result.\n     */\n    function eq(euint64 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.eq(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint64 a, euint16 b)  and returns the result.\n     */\n    function ne(euint64 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.ne(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates ge(euint64 a, euint16 b)  and returns the result.\n     */\n    function ge(euint64 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.ge(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates gt(euint64 a, euint16 b)  and returns the result.\n     */\n    function gt(euint64 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.gt(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates le(euint64 a, euint16 b)  and returns the result.\n     */\n    function le(euint64 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.le(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates lt(euint64 a, euint16 b)  and returns the result.\n     */\n    function lt(euint64 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.lt(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates min(euint64 a, euint16 b)  and returns the result.\n     */\n    function min(euint64 a, euint16 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint64.wrap(Impl.min(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates max(euint64 a, euint16 b)  and returns the result.\n     */\n    function max(euint64 a, euint16 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint64.wrap(Impl.max(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates add(euint64 a, euint32 b)  and returns the result.\n     */\n    function add(euint64 a, euint32 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint64.wrap(Impl.add(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates sub(euint64 a, euint32 b)  and returns the result.\n     */\n    function sub(euint64 a, euint32 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint64.wrap(Impl.sub(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates mul(euint64 a, euint32 b)  and returns the result.\n     */\n    function mul(euint64 a, euint32 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint64.wrap(Impl.mul(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint64 a, euint32 b)  and returns the result.\n     */\n    function and(euint64 a, euint32 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint64.wrap(Impl.and(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint64 a, euint32 b)  and returns the result.\n     */\n    function or(euint64 a, euint32 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint64.wrap(Impl.or(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint64 a, euint32 b)  and returns the result.\n     */\n    function xor(euint64 a, euint32 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint64.wrap(Impl.xor(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint64 a, euint32 b)  and returns the result.\n     */\n    function eq(euint64 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.eq(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint64 a, euint32 b)  and returns the result.\n     */\n    function ne(euint64 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.ne(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates ge(euint64 a, euint32 b)  and returns the result.\n     */\n    function ge(euint64 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.ge(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates gt(euint64 a, euint32 b)  and returns the result.\n     */\n    function gt(euint64 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.gt(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates le(euint64 a, euint32 b)  and returns the result.\n     */\n    function le(euint64 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.le(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates lt(euint64 a, euint32 b)  and returns the result.\n     */\n    function lt(euint64 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.lt(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates min(euint64 a, euint32 b)  and returns the result.\n     */\n    function min(euint64 a, euint32 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint64.wrap(Impl.min(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates max(euint64 a, euint32 b)  and returns the result.\n     */\n    function max(euint64 a, euint32 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint64.wrap(Impl.max(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates add(euint64 a, euint64 b)  and returns the result.\n     */\n    function add(euint64 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.add(euint64.unwrap(a), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates sub(euint64 a, euint64 b)  and returns the result.\n     */\n    function sub(euint64 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.sub(euint64.unwrap(a), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates mul(euint64 a, euint64 b)  and returns the result.\n     */\n    function mul(euint64 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.mul(euint64.unwrap(a), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint64 a, euint64 b)  and returns the result.\n     */\n    function and(euint64 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.and(euint64.unwrap(a), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint64 a, euint64 b)  and returns the result.\n     */\n    function or(euint64 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.or(euint64.unwrap(a), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint64 a, euint64 b)  and returns the result.\n     */\n    function xor(euint64 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.xor(euint64.unwrap(a), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint64 a, euint64 b)  and returns the result.\n     */\n    function eq(euint64 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.eq(euint64.unwrap(a), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint64 a, euint64 b)  and returns the result.\n     */\n    function ne(euint64 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.ne(euint64.unwrap(a), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ge(euint64 a, euint64 b)  and returns the result.\n     */\n    function ge(euint64 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.ge(euint64.unwrap(a), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates gt(euint64 a, euint64 b)  and returns the result.\n     */\n    function gt(euint64 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.gt(euint64.unwrap(a), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates le(euint64 a, euint64 b)  and returns the result.\n     */\n    function le(euint64 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.le(euint64.unwrap(a), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates lt(euint64 a, euint64 b)  and returns the result.\n     */\n    function lt(euint64 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.lt(euint64.unwrap(a), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates min(euint64 a, euint64 b)  and returns the result.\n     */\n    function min(euint64 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.min(euint64.unwrap(a), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates max(euint64 a, euint64 b)  and returns the result.\n     */\n    function max(euint64 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.max(euint64.unwrap(a), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates add(euint64 a, euint128 b)  and returns the result.\n     */\n    function add(euint64 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.add(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates sub(euint64 a, euint128 b)  and returns the result.\n     */\n    function sub(euint64 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.sub(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates mul(euint64 a, euint128 b)  and returns the result.\n     */\n    function mul(euint64 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.mul(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint64 a, euint128 b)  and returns the result.\n     */\n    function and(euint64 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.and(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint64 a, euint128 b)  and returns the result.\n     */\n    function or(euint64 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.or(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint64 a, euint128 b)  and returns the result.\n     */\n    function xor(euint64 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.xor(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint64 a, euint128 b)  and returns the result.\n     */\n    function eq(euint64 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.eq(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint64 a, euint128 b)  and returns the result.\n     */\n    function ne(euint64 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.ne(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ge(euint64 a, euint128 b)  and returns the result.\n     */\n    function ge(euint64 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.ge(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates gt(euint64 a, euint128 b)  and returns the result.\n     */\n    function gt(euint64 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.gt(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates le(euint64 a, euint128 b)  and returns the result.\n     */\n    function le(euint64 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.le(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates lt(euint64 a, euint128 b)  and returns the result.\n     */\n    function lt(euint64 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.lt(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates min(euint64 a, euint128 b)  and returns the result.\n     */\n    function min(euint64 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.min(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates max(euint64 a, euint128 b)  and returns the result.\n     */\n    function max(euint64 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.max(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint64 a, euint256 b)  and returns the result.\n     */\n    function and(euint64 a, euint256 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return euint256.wrap(Impl.and(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint64 a, euint256 b)  and returns the result.\n     */\n    function or(euint64 a, euint256 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return euint256.wrap(Impl.or(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint64 a, euint256 b)  and returns the result.\n     */\n    function xor(euint64 a, euint256 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return euint256.wrap(Impl.xor(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint64 a, euint256 b)  and returns the result.\n     */\n    function eq(euint64 a, euint256 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return ebool.wrap(Impl.eq(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint64 a, euint256 b)  and returns the result.\n     */\n    function ne(euint64 a, euint256 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return ebool.wrap(Impl.ne(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates add(euint128 a, euint8 b)  and returns the result.\n     */\n    function add(euint128 a, euint8 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint128.wrap(Impl.add(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates sub(euint128 a, euint8 b)  and returns the result.\n     */\n    function sub(euint128 a, euint8 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint128.wrap(Impl.sub(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates mul(euint128 a, euint8 b)  and returns the result.\n     */\n    function mul(euint128 a, euint8 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint128.wrap(Impl.mul(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint128 a, euint8 b)  and returns the result.\n     */\n    function and(euint128 a, euint8 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint128.wrap(Impl.and(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint128 a, euint8 b)  and returns the result.\n     */\n    function or(euint128 a, euint8 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint128.wrap(Impl.or(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint128 a, euint8 b)  and returns the result.\n     */\n    function xor(euint128 a, euint8 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint128.wrap(Impl.xor(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint128 a, euint8 b)  and returns the result.\n     */\n    function eq(euint128 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.eq(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint128 a, euint8 b)  and returns the result.\n     */\n    function ne(euint128 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.ne(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates ge(euint128 a, euint8 b)  and returns the result.\n     */\n    function ge(euint128 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.ge(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates gt(euint128 a, euint8 b)  and returns the result.\n     */\n    function gt(euint128 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.gt(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates le(euint128 a, euint8 b)  and returns the result.\n     */\n    function le(euint128 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.le(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates lt(euint128 a, euint8 b)  and returns the result.\n     */\n    function lt(euint128 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.lt(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates min(euint128 a, euint8 b)  and returns the result.\n     */\n    function min(euint128 a, euint8 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint128.wrap(Impl.min(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates max(euint128 a, euint8 b)  and returns the result.\n     */\n    function max(euint128 a, euint8 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint128.wrap(Impl.max(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates add(euint128 a, euint16 b)  and returns the result.\n     */\n    function add(euint128 a, euint16 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint128.wrap(Impl.add(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates sub(euint128 a, euint16 b)  and returns the result.\n     */\n    function sub(euint128 a, euint16 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint128.wrap(Impl.sub(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates mul(euint128 a, euint16 b)  and returns the result.\n     */\n    function mul(euint128 a, euint16 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint128.wrap(Impl.mul(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint128 a, euint16 b)  and returns the result.\n     */\n    function and(euint128 a, euint16 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint128.wrap(Impl.and(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint128 a, euint16 b)  and returns the result.\n     */\n    function or(euint128 a, euint16 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint128.wrap(Impl.or(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint128 a, euint16 b)  and returns the result.\n     */\n    function xor(euint128 a, euint16 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint128.wrap(Impl.xor(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint128 a, euint16 b)  and returns the result.\n     */\n    function eq(euint128 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.eq(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint128 a, euint16 b)  and returns the result.\n     */\n    function ne(euint128 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.ne(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates ge(euint128 a, euint16 b)  and returns the result.\n     */\n    function ge(euint128 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.ge(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates gt(euint128 a, euint16 b)  and returns the result.\n     */\n    function gt(euint128 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.gt(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates le(euint128 a, euint16 b)  and returns the result.\n     */\n    function le(euint128 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.le(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates lt(euint128 a, euint16 b)  and returns the result.\n     */\n    function lt(euint128 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.lt(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates min(euint128 a, euint16 b)  and returns the result.\n     */\n    function min(euint128 a, euint16 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint128.wrap(Impl.min(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates max(euint128 a, euint16 b)  and returns the result.\n     */\n    function max(euint128 a, euint16 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint128.wrap(Impl.max(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates add(euint128 a, euint32 b)  and returns the result.\n     */\n    function add(euint128 a, euint32 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint128.wrap(Impl.add(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates sub(euint128 a, euint32 b)  and returns the result.\n     */\n    function sub(euint128 a, euint32 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint128.wrap(Impl.sub(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates mul(euint128 a, euint32 b)  and returns the result.\n     */\n    function mul(euint128 a, euint32 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint128.wrap(Impl.mul(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint128 a, euint32 b)  and returns the result.\n     */\n    function and(euint128 a, euint32 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint128.wrap(Impl.and(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint128 a, euint32 b)  and returns the result.\n     */\n    function or(euint128 a, euint32 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint128.wrap(Impl.or(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint128 a, euint32 b)  and returns the result.\n     */\n    function xor(euint128 a, euint32 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint128.wrap(Impl.xor(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint128 a, euint32 b)  and returns the result.\n     */\n    function eq(euint128 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.eq(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint128 a, euint32 b)  and returns the result.\n     */\n    function ne(euint128 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.ne(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates ge(euint128 a, euint32 b)  and returns the result.\n     */\n    function ge(euint128 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.ge(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates gt(euint128 a, euint32 b)  and returns the result.\n     */\n    function gt(euint128 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.gt(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates le(euint128 a, euint32 b)  and returns the result.\n     */\n    function le(euint128 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.le(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates lt(euint128 a, euint32 b)  and returns the result.\n     */\n    function lt(euint128 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.lt(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates min(euint128 a, euint32 b)  and returns the result.\n     */\n    function min(euint128 a, euint32 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint128.wrap(Impl.min(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates max(euint128 a, euint32 b)  and returns the result.\n     */\n    function max(euint128 a, euint32 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint128.wrap(Impl.max(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates add(euint128 a, euint64 b)  and returns the result.\n     */\n    function add(euint128 a, euint64 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint128.wrap(Impl.add(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates sub(euint128 a, euint64 b)  and returns the result.\n     */\n    function sub(euint128 a, euint64 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint128.wrap(Impl.sub(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates mul(euint128 a, euint64 b)  and returns the result.\n     */\n    function mul(euint128 a, euint64 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint128.wrap(Impl.mul(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint128 a, euint64 b)  and returns the result.\n     */\n    function and(euint128 a, euint64 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint128.wrap(Impl.and(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint128 a, euint64 b)  and returns the result.\n     */\n    function or(euint128 a, euint64 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint128.wrap(Impl.or(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint128 a, euint64 b)  and returns the result.\n     */\n    function xor(euint128 a, euint64 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint128.wrap(Impl.xor(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint128 a, euint64 b)  and returns the result.\n     */\n    function eq(euint128 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.eq(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint128 a, euint64 b)  and returns the result.\n     */\n    function ne(euint128 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.ne(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates ge(euint128 a, euint64 b)  and returns the result.\n     */\n    function ge(euint128 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.ge(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates gt(euint128 a, euint64 b)  and returns the result.\n     */\n    function gt(euint128 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.gt(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates le(euint128 a, euint64 b)  and returns the result.\n     */\n    function le(euint128 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.le(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates lt(euint128 a, euint64 b)  and returns the result.\n     */\n    function lt(euint128 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.lt(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates min(euint128 a, euint64 b)  and returns the result.\n     */\n    function min(euint128 a, euint64 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint128.wrap(Impl.min(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates max(euint128 a, euint64 b)  and returns the result.\n     */\n    function max(euint128 a, euint64 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint128.wrap(Impl.max(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates add(euint128 a, euint128 b)  and returns the result.\n     */\n    function add(euint128 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.add(euint128.unwrap(a), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates sub(euint128 a, euint128 b)  and returns the result.\n     */\n    function sub(euint128 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.sub(euint128.unwrap(a), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates mul(euint128 a, euint128 b)  and returns the result.\n     */\n    function mul(euint128 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.mul(euint128.unwrap(a), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint128 a, euint128 b)  and returns the result.\n     */\n    function and(euint128 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.and(euint128.unwrap(a), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint128 a, euint128 b)  and returns the result.\n     */\n    function or(euint128 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.or(euint128.unwrap(a), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint128 a, euint128 b)  and returns the result.\n     */\n    function xor(euint128 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.xor(euint128.unwrap(a), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint128 a, euint128 b)  and returns the result.\n     */\n    function eq(euint128 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.eq(euint128.unwrap(a), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint128 a, euint128 b)  and returns the result.\n     */\n    function ne(euint128 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.ne(euint128.unwrap(a), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ge(euint128 a, euint128 b)  and returns the result.\n     */\n    function ge(euint128 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.ge(euint128.unwrap(a), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates gt(euint128 a, euint128 b)  and returns the result.\n     */\n    function gt(euint128 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.gt(euint128.unwrap(a), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates le(euint128 a, euint128 b)  and returns the result.\n     */\n    function le(euint128 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.le(euint128.unwrap(a), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates lt(euint128 a, euint128 b)  and returns the result.\n     */\n    function lt(euint128 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.lt(euint128.unwrap(a), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates min(euint128 a, euint128 b)  and returns the result.\n     */\n    function min(euint128 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.min(euint128.unwrap(a), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates max(euint128 a, euint128 b)  and returns the result.\n     */\n    function max(euint128 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.max(euint128.unwrap(a), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint128 a, euint256 b)  and returns the result.\n     */\n    function and(euint128 a, euint256 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return euint256.wrap(Impl.and(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint128 a, euint256 b)  and returns the result.\n     */\n    function or(euint128 a, euint256 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return euint256.wrap(Impl.or(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint128 a, euint256 b)  and returns the result.\n     */\n    function xor(euint128 a, euint256 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return euint256.wrap(Impl.xor(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint128 a, euint256 b)  and returns the result.\n     */\n    function eq(euint128 a, euint256 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return ebool.wrap(Impl.eq(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint128 a, euint256 b)  and returns the result.\n     */\n    function ne(euint128 a, euint256 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return ebool.wrap(Impl.ne(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates eq(eaddress a, eaddress b) and returns the result.\n     */\n    function eq(eaddress a, eaddress b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEaddress(address(0));\n        }\n        if (!isInitialized(b)) {\n            b = asEaddress(address(0));\n        }\n        return ebool.wrap(Impl.eq(eaddress.unwrap(a), eaddress.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ne(eaddress a, eaddress b) and returns the result.\n     */\n    function ne(eaddress a, eaddress b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEaddress(address(0));\n        }\n        if (!isInitialized(b)) {\n            b = asEaddress(address(0));\n        }\n        return ebool.wrap(Impl.ne(eaddress.unwrap(a), eaddress.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint256 a, euint8 b)  and returns the result.\n     */\n    function and(euint256 a, euint8 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint256.wrap(Impl.and(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint256 a, euint8 b)  and returns the result.\n     */\n    function or(euint256 a, euint8 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint256.wrap(Impl.or(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint256 a, euint8 b)  and returns the result.\n     */\n    function xor(euint256 a, euint8 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint256.wrap(Impl.xor(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint256 a, euint8 b)  and returns the result.\n     */\n    function eq(euint256 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.eq(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint256 a, euint8 b)  and returns the result.\n     */\n    function ne(euint256 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.ne(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint256 a, euint16 b)  and returns the result.\n     */\n    function and(euint256 a, euint16 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint256.wrap(Impl.and(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint256 a, euint16 b)  and returns the result.\n     */\n    function or(euint256 a, euint16 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint256.wrap(Impl.or(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint256 a, euint16 b)  and returns the result.\n     */\n    function xor(euint256 a, euint16 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint256.wrap(Impl.xor(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint256 a, euint16 b)  and returns the result.\n     */\n    function eq(euint256 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.eq(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint256 a, euint16 b)  and returns the result.\n     */\n    function ne(euint256 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.ne(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint256 a, euint32 b)  and returns the result.\n     */\n    function and(euint256 a, euint32 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint256.wrap(Impl.and(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint256 a, euint32 b)  and returns the result.\n     */\n    function or(euint256 a, euint32 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint256.wrap(Impl.or(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint256 a, euint32 b)  and returns the result.\n     */\n    function xor(euint256 a, euint32 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint256.wrap(Impl.xor(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint256 a, euint32 b)  and returns the result.\n     */\n    function eq(euint256 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.eq(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint256 a, euint32 b)  and returns the result.\n     */\n    function ne(euint256 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.ne(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint256 a, euint64 b)  and returns the result.\n     */\n    function and(euint256 a, euint64 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint256.wrap(Impl.and(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint256 a, euint64 b)  and returns the result.\n     */\n    function or(euint256 a, euint64 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint256.wrap(Impl.or(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint256 a, euint64 b)  and returns the result.\n     */\n    function xor(euint256 a, euint64 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint256.wrap(Impl.xor(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint256 a, euint64 b)  and returns the result.\n     */\n    function eq(euint256 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.eq(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint256 a, euint64 b)  and returns the result.\n     */\n    function ne(euint256 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.ne(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint256 a, euint128 b)  and returns the result.\n     */\n    function and(euint256 a, euint128 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint256.wrap(Impl.and(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint256 a, euint128 b)  and returns the result.\n     */\n    function or(euint256 a, euint128 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint256.wrap(Impl.or(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint256 a, euint128 b)  and returns the result.\n     */\n    function xor(euint256 a, euint128 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint256.wrap(Impl.xor(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint256 a, euint128 b)  and returns the result.\n     */\n    function eq(euint256 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.eq(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint256 a, euint128 b)  and returns the result.\n     */\n    function ne(euint256 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.ne(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\n    }\n\n    /**\n     * @dev Evaluates and(euint256 a, euint256 b)  and returns the result.\n     */\n    function and(euint256 a, euint256 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return euint256.wrap(Impl.and(euint256.unwrap(a), euint256.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates or(euint256 a, euint256 b)  and returns the result.\n     */\n    function or(euint256 a, euint256 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return euint256.wrap(Impl.or(euint256.unwrap(a), euint256.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates xor(euint256 a, euint256 b)  and returns the result.\n     */\n    function xor(euint256 a, euint256 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return euint256.wrap(Impl.xor(euint256.unwrap(a), euint256.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates eq(euint256 a, euint256 b)  and returns the result.\n     */\n    function eq(euint256 a, euint256 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return ebool.wrap(Impl.eq(euint256.unwrap(a), euint256.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates ne(euint256 a, euint256 b)  and returns the result.\n     */\n    function ne(euint256 a, euint256 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return ebool.wrap(Impl.ne(euint256.unwrap(a), euint256.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates and(ebool a, bool b) and returns the result.\n     */\n    function and(ebool a, bool b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEbool(false);\n        }\n        return ebool.wrap(Impl.and(ebool.unwrap(a), bytes32(uint256(b ? 1 : 0)), true));\n    }\n\n    /**\n     * @dev Evaluates and(bool a, ebool b) and returns the result.\n     */\n    function and(bool a, ebool b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEbool(false);\n        }\n        return ebool.wrap(Impl.and(ebool.unwrap(b), bytes32(uint256(a ? 1 : 0)), true));\n    }\n\n    /**\n     * @dev Evaluates or(ebool a, bool b) and returns the result.\n     */\n    function or(ebool a, bool b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEbool(false);\n        }\n        return ebool.wrap(Impl.or(ebool.unwrap(a), bytes32(uint256(b ? 1 : 0)), true));\n    }\n\n    /**\n     * @dev Evaluates or(bool a, ebool b) and returns the result.\n     */\n    function or(bool a, ebool b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEbool(false);\n        }\n        return ebool.wrap(Impl.or(ebool.unwrap(b), bytes32(uint256(a ? 1 : 0)), true));\n    }\n\n    /**\n     * @dev Evaluates xor(ebool a, bool b) and returns the result.\n     */\n    function xor(ebool a, bool b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEbool(false);\n        }\n        return ebool.wrap(Impl.xor(ebool.unwrap(a), bytes32(uint256(b ? 1 : 0)), true));\n    }\n\n    /**\n     * @dev Evaluates xor(bool a, ebool b) and returns the result.\n     */\n    function xor(bool a, ebool b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEbool(false);\n        }\n        return ebool.wrap(Impl.xor(ebool.unwrap(b), bytes32(uint256(a ? 1 : 0)), true));\n    }\n\n    /**\n     * @dev Evaluates eq(ebool a, bool b) and returns the result.\n     */\n    function eq(ebool a, bool b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEbool(false);\n        }\n        return ebool.wrap(Impl.eq(ebool.unwrap(a), bytes32(uint256(b ? 1 : 0)), true));\n    }\n\n    /**\n     * @dev Evaluates eq(bool a, ebool b) and returns the result.\n     */\n    function eq(bool a, ebool b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEbool(false);\n        }\n        return ebool.wrap(Impl.eq(ebool.unwrap(b), bytes32(uint256(a ? 1 : 0)), true));\n    }\n\n    /**\n     * @dev Evaluates ne(ebool a, bool b) and returns the result.\n     */\n    function ne(ebool a, bool b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEbool(false);\n        }\n        return ebool.wrap(Impl.ne(ebool.unwrap(a), bytes32(uint256(b ? 1 : 0)), true));\n    }\n\n    /**\n     * @dev Evaluates ne(bool a, ebool b) and returns the result.\n     */\n    function ne(bool a, ebool b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEbool(false);\n        }\n        return ebool.wrap(Impl.ne(ebool.unwrap(b), bytes32(uint256(a ? 1 : 0)), true));\n    }\n\n    /**\n     * @dev Evaluates add(euint8 a, uint8 b) and returns the result.\n     */\n    function add(euint8 a, uint8 b) internal returns (euint8) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        return euint8.wrap(Impl.add(euint8.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates add(uint8 a, euint8 b) and returns the result.\n     */\n    function add(uint8 a, euint8 b) internal returns (euint8) {\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint8.wrap(Impl.add(euint8.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates sub(euint8 a, uint8 b) and returns the result.\n     */\n    function sub(euint8 a, uint8 b) internal returns (euint8) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        return euint8.wrap(Impl.sub(euint8.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates sub(uint8 a, euint8 b) and returns the result.\n     */\n    function sub(uint8 a, euint8 b) internal returns (euint8) {\n        euint8 aEnc = asEuint8(a);\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint8.wrap(Impl.sub(euint8.unwrap(aEnc), euint8.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates mul(euint8 a, uint8 b) and returns the result.\n     */\n    function mul(euint8 a, uint8 b) internal returns (euint8) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        return euint8.wrap(Impl.mul(euint8.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates mul(uint8 a, euint8 b) and returns the result.\n     */\n    function mul(uint8 a, euint8 b) internal returns (euint8) {\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint8.wrap(Impl.mul(euint8.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates div(euint8 a, uint8 b) and returns the result.\n     */\n    function div(euint8 a, uint8 b) internal returns (euint8) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        return euint8.wrap(Impl.div(euint8.unwrap(a), bytes32(uint256(b))));\n    }\n\n    /**\n     * @dev Evaluates rem(euint8 a, uint8 b) and returns the result.\n     */\n    function rem(euint8 a, uint8 b) internal returns (euint8) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        return euint8.wrap(Impl.rem(euint8.unwrap(a), bytes32(uint256(b))));\n    }\n\n    /**\n     * @dev Evaluates and(euint8 a, uint8 b) and returns the result.\n     */\n    function and(euint8 a, uint8 b) internal returns (euint8) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        return euint8.wrap(Impl.and(euint8.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates and(uint8 a, euint8 b) and returns the result.\n     */\n    function and(uint8 a, euint8 b) internal returns (euint8) {\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint8.wrap(Impl.and(euint8.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates or(euint8 a, uint8 b) and returns the result.\n     */\n    function or(euint8 a, uint8 b) internal returns (euint8) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        return euint8.wrap(Impl.or(euint8.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates or(uint8 a, euint8 b) and returns the result.\n     */\n    function or(uint8 a, euint8 b) internal returns (euint8) {\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint8.wrap(Impl.or(euint8.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates xor(euint8 a, uint8 b) and returns the result.\n     */\n    function xor(euint8 a, uint8 b) internal returns (euint8) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        return euint8.wrap(Impl.xor(euint8.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates xor(uint8 a, euint8 b) and returns the result.\n     */\n    function xor(uint8 a, euint8 b) internal returns (euint8) {\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint8.wrap(Impl.xor(euint8.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates eq(euint8 a, uint8 b) and returns the result.\n     */\n    function eq(euint8 a, uint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        return ebool.wrap(Impl.eq(euint8.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates eq(uint8 a, euint8 b) and returns the result.\n     */\n    function eq(uint8 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.eq(euint8.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates ne(euint8 a, uint8 b) and returns the result.\n     */\n    function ne(euint8 a, uint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        return ebool.wrap(Impl.ne(euint8.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates ne(uint8 a, euint8 b) and returns the result.\n     */\n    function ne(uint8 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.ne(euint8.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates ge(euint8 a, uint8 b) and returns the result.\n     */\n    function ge(euint8 a, uint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        return ebool.wrap(Impl.ge(euint8.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates ge(uint8 a, euint8 b) and returns the result.\n     */\n    function ge(uint8 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.le(euint8.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates gt(euint8 a, uint8 b) and returns the result.\n     */\n    function gt(euint8 a, uint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        return ebool.wrap(Impl.gt(euint8.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates gt(uint8 a, euint8 b) and returns the result.\n     */\n    function gt(uint8 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.lt(euint8.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates le(euint8 a, uint8 b) and returns the result.\n     */\n    function le(euint8 a, uint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        return ebool.wrap(Impl.le(euint8.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates le(uint8 a, euint8 b) and returns the result.\n     */\n    function le(uint8 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.ge(euint8.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates lt(euint8 a, uint8 b) and returns the result.\n     */\n    function lt(euint8 a, uint8 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        return ebool.wrap(Impl.lt(euint8.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates lt(uint8 a, euint8 b) and returns the result.\n     */\n    function lt(uint8 a, euint8 b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return ebool.wrap(Impl.gt(euint8.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates min(euint8 a, uint8 b) and returns the result.\n     */\n    function min(euint8 a, uint8 b) internal returns (euint8) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        return euint8.wrap(Impl.min(euint8.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates min(uint8 a, euint8 b) and returns the result.\n     */\n    function min(uint8 a, euint8 b) internal returns (euint8) {\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint8.wrap(Impl.min(euint8.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates max(euint8 a, uint8 b) and returns the result.\n     */\n    function max(euint8 a, uint8 b) internal returns (euint8) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        return euint8.wrap(Impl.max(euint8.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates max(uint8 a, euint8 b) and returns the result.\n     */\n    function max(uint8 a, euint8 b) internal returns (euint8) {\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint8.wrap(Impl.max(euint8.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates add(euint16 a, uint16 b) and returns the result.\n     */\n    function add(euint16 a, uint16 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        return euint16.wrap(Impl.add(euint16.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates add(uint16 a, euint16 b) and returns the result.\n     */\n    function add(uint16 a, euint16 b) internal returns (euint16) {\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint16.wrap(Impl.add(euint16.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates sub(euint16 a, uint16 b) and returns the result.\n     */\n    function sub(euint16 a, uint16 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        return euint16.wrap(Impl.sub(euint16.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates sub(uint16 a, euint16 b) and returns the result.\n     */\n    function sub(uint16 a, euint16 b) internal returns (euint16) {\n        euint16 aEnc = asEuint16(a);\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint16.wrap(Impl.sub(euint16.unwrap(aEnc), euint16.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates mul(euint16 a, uint16 b) and returns the result.\n     */\n    function mul(euint16 a, uint16 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        return euint16.wrap(Impl.mul(euint16.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates mul(uint16 a, euint16 b) and returns the result.\n     */\n    function mul(uint16 a, euint16 b) internal returns (euint16) {\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint16.wrap(Impl.mul(euint16.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates div(euint16 a, uint16 b) and returns the result.\n     */\n    function div(euint16 a, uint16 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        return euint16.wrap(Impl.div(euint16.unwrap(a), bytes32(uint256(b))));\n    }\n\n    /**\n     * @dev Evaluates rem(euint16 a, uint16 b) and returns the result.\n     */\n    function rem(euint16 a, uint16 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        return euint16.wrap(Impl.rem(euint16.unwrap(a), bytes32(uint256(b))));\n    }\n\n    /**\n     * @dev Evaluates and(euint16 a, uint16 b) and returns the result.\n     */\n    function and(euint16 a, uint16 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        return euint16.wrap(Impl.and(euint16.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates and(uint16 a, euint16 b) and returns the result.\n     */\n    function and(uint16 a, euint16 b) internal returns (euint16) {\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint16.wrap(Impl.and(euint16.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates or(euint16 a, uint16 b) and returns the result.\n     */\n    function or(euint16 a, uint16 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        return euint16.wrap(Impl.or(euint16.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates or(uint16 a, euint16 b) and returns the result.\n     */\n    function or(uint16 a, euint16 b) internal returns (euint16) {\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint16.wrap(Impl.or(euint16.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates xor(euint16 a, uint16 b) and returns the result.\n     */\n    function xor(euint16 a, uint16 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        return euint16.wrap(Impl.xor(euint16.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates xor(uint16 a, euint16 b) and returns the result.\n     */\n    function xor(uint16 a, euint16 b) internal returns (euint16) {\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint16.wrap(Impl.xor(euint16.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates eq(euint16 a, uint16 b) and returns the result.\n     */\n    function eq(euint16 a, uint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        return ebool.wrap(Impl.eq(euint16.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates eq(uint16 a, euint16 b) and returns the result.\n     */\n    function eq(uint16 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.eq(euint16.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates ne(euint16 a, uint16 b) and returns the result.\n     */\n    function ne(euint16 a, uint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        return ebool.wrap(Impl.ne(euint16.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates ne(uint16 a, euint16 b) and returns the result.\n     */\n    function ne(uint16 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.ne(euint16.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates ge(euint16 a, uint16 b) and returns the result.\n     */\n    function ge(euint16 a, uint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        return ebool.wrap(Impl.ge(euint16.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates ge(uint16 a, euint16 b) and returns the result.\n     */\n    function ge(uint16 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.le(euint16.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates gt(euint16 a, uint16 b) and returns the result.\n     */\n    function gt(euint16 a, uint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        return ebool.wrap(Impl.gt(euint16.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates gt(uint16 a, euint16 b) and returns the result.\n     */\n    function gt(uint16 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.lt(euint16.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates le(euint16 a, uint16 b) and returns the result.\n     */\n    function le(euint16 a, uint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        return ebool.wrap(Impl.le(euint16.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates le(uint16 a, euint16 b) and returns the result.\n     */\n    function le(uint16 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.ge(euint16.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates lt(euint16 a, uint16 b) and returns the result.\n     */\n    function lt(euint16 a, uint16 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        return ebool.wrap(Impl.lt(euint16.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates lt(uint16 a, euint16 b) and returns the result.\n     */\n    function lt(uint16 a, euint16 b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return ebool.wrap(Impl.gt(euint16.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates min(euint16 a, uint16 b) and returns the result.\n     */\n    function min(euint16 a, uint16 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        return euint16.wrap(Impl.min(euint16.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates min(uint16 a, euint16 b) and returns the result.\n     */\n    function min(uint16 a, euint16 b) internal returns (euint16) {\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint16.wrap(Impl.min(euint16.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates max(euint16 a, uint16 b) and returns the result.\n     */\n    function max(euint16 a, uint16 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        return euint16.wrap(Impl.max(euint16.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates max(uint16 a, euint16 b) and returns the result.\n     */\n    function max(uint16 a, euint16 b) internal returns (euint16) {\n        if (!isInitialized(b)) {\n            b = asEuint16(0);\n        }\n        return euint16.wrap(Impl.max(euint16.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates add(euint32 a, uint32 b) and returns the result.\n     */\n    function add(euint32 a, uint32 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        return euint32.wrap(Impl.add(euint32.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates add(uint32 a, euint32 b) and returns the result.\n     */\n    function add(uint32 a, euint32 b) internal returns (euint32) {\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint32.wrap(Impl.add(euint32.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates sub(euint32 a, uint32 b) and returns the result.\n     */\n    function sub(euint32 a, uint32 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        return euint32.wrap(Impl.sub(euint32.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates sub(uint32 a, euint32 b) and returns the result.\n     */\n    function sub(uint32 a, euint32 b) internal returns (euint32) {\n        euint32 aEnc = asEuint32(a);\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint32.wrap(Impl.sub(euint32.unwrap(aEnc), euint32.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates mul(euint32 a, uint32 b) and returns the result.\n     */\n    function mul(euint32 a, uint32 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        return euint32.wrap(Impl.mul(euint32.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates mul(uint32 a, euint32 b) and returns the result.\n     */\n    function mul(uint32 a, euint32 b) internal returns (euint32) {\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint32.wrap(Impl.mul(euint32.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates div(euint32 a, uint32 b) and returns the result.\n     */\n    function div(euint32 a, uint32 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        return euint32.wrap(Impl.div(euint32.unwrap(a), bytes32(uint256(b))));\n    }\n\n    /**\n     * @dev Evaluates rem(euint32 a, uint32 b) and returns the result.\n     */\n    function rem(euint32 a, uint32 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        return euint32.wrap(Impl.rem(euint32.unwrap(a), bytes32(uint256(b))));\n    }\n\n    /**\n     * @dev Evaluates and(euint32 a, uint32 b) and returns the result.\n     */\n    function and(euint32 a, uint32 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        return euint32.wrap(Impl.and(euint32.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates and(uint32 a, euint32 b) and returns the result.\n     */\n    function and(uint32 a, euint32 b) internal returns (euint32) {\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint32.wrap(Impl.and(euint32.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates or(euint32 a, uint32 b) and returns the result.\n     */\n    function or(euint32 a, uint32 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        return euint32.wrap(Impl.or(euint32.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates or(uint32 a, euint32 b) and returns the result.\n     */\n    function or(uint32 a, euint32 b) internal returns (euint32) {\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint32.wrap(Impl.or(euint32.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates xor(euint32 a, uint32 b) and returns the result.\n     */\n    function xor(euint32 a, uint32 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        return euint32.wrap(Impl.xor(euint32.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates xor(uint32 a, euint32 b) and returns the result.\n     */\n    function xor(uint32 a, euint32 b) internal returns (euint32) {\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint32.wrap(Impl.xor(euint32.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates eq(euint32 a, uint32 b) and returns the result.\n     */\n    function eq(euint32 a, uint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        return ebool.wrap(Impl.eq(euint32.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates eq(uint32 a, euint32 b) and returns the result.\n     */\n    function eq(uint32 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.eq(euint32.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates ne(euint32 a, uint32 b) and returns the result.\n     */\n    function ne(euint32 a, uint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        return ebool.wrap(Impl.ne(euint32.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates ne(uint32 a, euint32 b) and returns the result.\n     */\n    function ne(uint32 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.ne(euint32.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates ge(euint32 a, uint32 b) and returns the result.\n     */\n    function ge(euint32 a, uint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        return ebool.wrap(Impl.ge(euint32.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates ge(uint32 a, euint32 b) and returns the result.\n     */\n    function ge(uint32 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.le(euint32.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates gt(euint32 a, uint32 b) and returns the result.\n     */\n    function gt(euint32 a, uint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        return ebool.wrap(Impl.gt(euint32.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates gt(uint32 a, euint32 b) and returns the result.\n     */\n    function gt(uint32 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.lt(euint32.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates le(euint32 a, uint32 b) and returns the result.\n     */\n    function le(euint32 a, uint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        return ebool.wrap(Impl.le(euint32.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates le(uint32 a, euint32 b) and returns the result.\n     */\n    function le(uint32 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.ge(euint32.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates lt(euint32 a, uint32 b) and returns the result.\n     */\n    function lt(euint32 a, uint32 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        return ebool.wrap(Impl.lt(euint32.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates lt(uint32 a, euint32 b) and returns the result.\n     */\n    function lt(uint32 a, euint32 b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return ebool.wrap(Impl.gt(euint32.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates min(euint32 a, uint32 b) and returns the result.\n     */\n    function min(euint32 a, uint32 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        return euint32.wrap(Impl.min(euint32.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates min(uint32 a, euint32 b) and returns the result.\n     */\n    function min(uint32 a, euint32 b) internal returns (euint32) {\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint32.wrap(Impl.min(euint32.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates max(euint32 a, uint32 b) and returns the result.\n     */\n    function max(euint32 a, uint32 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        return euint32.wrap(Impl.max(euint32.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates max(uint32 a, euint32 b) and returns the result.\n     */\n    function max(uint32 a, euint32 b) internal returns (euint32) {\n        if (!isInitialized(b)) {\n            b = asEuint32(0);\n        }\n        return euint32.wrap(Impl.max(euint32.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates add(euint64 a, uint64 b) and returns the result.\n     */\n    function add(euint64 a, uint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        return euint64.wrap(Impl.add(euint64.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates add(uint64 a, euint64 b) and returns the result.\n     */\n    function add(uint64 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.add(euint64.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates sub(euint64 a, uint64 b) and returns the result.\n     */\n    function sub(euint64 a, uint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        return euint64.wrap(Impl.sub(euint64.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates sub(uint64 a, euint64 b) and returns the result.\n     */\n    function sub(uint64 a, euint64 b) internal returns (euint64) {\n        euint64 aEnc = asEuint64(a);\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.sub(euint64.unwrap(aEnc), euint64.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates mul(euint64 a, uint64 b) and returns the result.\n     */\n    function mul(euint64 a, uint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        return euint64.wrap(Impl.mul(euint64.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates mul(uint64 a, euint64 b) and returns the result.\n     */\n    function mul(uint64 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.mul(euint64.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates div(euint64 a, uint64 b) and returns the result.\n     */\n    function div(euint64 a, uint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        return euint64.wrap(Impl.div(euint64.unwrap(a), bytes32(uint256(b))));\n    }\n\n    /**\n     * @dev Evaluates rem(euint64 a, uint64 b) and returns the result.\n     */\n    function rem(euint64 a, uint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        return euint64.wrap(Impl.rem(euint64.unwrap(a), bytes32(uint256(b))));\n    }\n\n    /**\n     * @dev Evaluates and(euint64 a, uint64 b) and returns the result.\n     */\n    function and(euint64 a, uint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        return euint64.wrap(Impl.and(euint64.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates and(uint64 a, euint64 b) and returns the result.\n     */\n    function and(uint64 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.and(euint64.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates or(euint64 a, uint64 b) and returns the result.\n     */\n    function or(euint64 a, uint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        return euint64.wrap(Impl.or(euint64.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates or(uint64 a, euint64 b) and returns the result.\n     */\n    function or(uint64 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.or(euint64.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates xor(euint64 a, uint64 b) and returns the result.\n     */\n    function xor(euint64 a, uint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        return euint64.wrap(Impl.xor(euint64.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates xor(uint64 a, euint64 b) and returns the result.\n     */\n    function xor(uint64 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.xor(euint64.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates eq(euint64 a, uint64 b) and returns the result.\n     */\n    function eq(euint64 a, uint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        return ebool.wrap(Impl.eq(euint64.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates eq(uint64 a, euint64 b) and returns the result.\n     */\n    function eq(uint64 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.eq(euint64.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates ne(euint64 a, uint64 b) and returns the result.\n     */\n    function ne(euint64 a, uint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        return ebool.wrap(Impl.ne(euint64.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates ne(uint64 a, euint64 b) and returns the result.\n     */\n    function ne(uint64 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.ne(euint64.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates ge(euint64 a, uint64 b) and returns the result.\n     */\n    function ge(euint64 a, uint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        return ebool.wrap(Impl.ge(euint64.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates ge(uint64 a, euint64 b) and returns the result.\n     */\n    function ge(uint64 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.le(euint64.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates gt(euint64 a, uint64 b) and returns the result.\n     */\n    function gt(euint64 a, uint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        return ebool.wrap(Impl.gt(euint64.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates gt(uint64 a, euint64 b) and returns the result.\n     */\n    function gt(uint64 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.lt(euint64.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates le(euint64 a, uint64 b) and returns the result.\n     */\n    function le(euint64 a, uint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        return ebool.wrap(Impl.le(euint64.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates le(uint64 a, euint64 b) and returns the result.\n     */\n    function le(uint64 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.ge(euint64.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates lt(euint64 a, uint64 b) and returns the result.\n     */\n    function lt(euint64 a, uint64 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        return ebool.wrap(Impl.lt(euint64.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates lt(uint64 a, euint64 b) and returns the result.\n     */\n    function lt(uint64 a, euint64 b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return ebool.wrap(Impl.gt(euint64.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates min(euint64 a, uint64 b) and returns the result.\n     */\n    function min(euint64 a, uint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        return euint64.wrap(Impl.min(euint64.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates min(uint64 a, euint64 b) and returns the result.\n     */\n    function min(uint64 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.min(euint64.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates max(euint64 a, uint64 b) and returns the result.\n     */\n    function max(euint64 a, uint64 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        return euint64.wrap(Impl.max(euint64.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates max(uint64 a, euint64 b) and returns the result.\n     */\n    function max(uint64 a, euint64 b) internal returns (euint64) {\n        if (!isInitialized(b)) {\n            b = asEuint64(0);\n        }\n        return euint64.wrap(Impl.max(euint64.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates add(euint128 a, uint128 b) and returns the result.\n     */\n    function add(euint128 a, uint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        return euint128.wrap(Impl.add(euint128.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates add(uint128 a, euint128 b) and returns the result.\n     */\n    function add(uint128 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.add(euint128.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates sub(euint128 a, uint128 b) and returns the result.\n     */\n    function sub(euint128 a, uint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        return euint128.wrap(Impl.sub(euint128.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates sub(uint128 a, euint128 b) and returns the result.\n     */\n    function sub(uint128 a, euint128 b) internal returns (euint128) {\n        euint128 aEnc = asEuint128(a);\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.sub(euint128.unwrap(aEnc), euint128.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates mul(euint128 a, uint128 b) and returns the result.\n     */\n    function mul(euint128 a, uint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        return euint128.wrap(Impl.mul(euint128.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates mul(uint128 a, euint128 b) and returns the result.\n     */\n    function mul(uint128 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.mul(euint128.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates div(euint128 a, uint128 b) and returns the result.\n     */\n    function div(euint128 a, uint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        return euint128.wrap(Impl.div(euint128.unwrap(a), bytes32(uint256(b))));\n    }\n\n    /**\n     * @dev Evaluates rem(euint128 a, uint128 b) and returns the result.\n     */\n    function rem(euint128 a, uint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        return euint128.wrap(Impl.rem(euint128.unwrap(a), bytes32(uint256(b))));\n    }\n\n    /**\n     * @dev Evaluates and(euint128 a, uint128 b) and returns the result.\n     */\n    function and(euint128 a, uint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        return euint128.wrap(Impl.and(euint128.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates and(uint128 a, euint128 b) and returns the result.\n     */\n    function and(uint128 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.and(euint128.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates or(euint128 a, uint128 b) and returns the result.\n     */\n    function or(euint128 a, uint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        return euint128.wrap(Impl.or(euint128.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates or(uint128 a, euint128 b) and returns the result.\n     */\n    function or(uint128 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.or(euint128.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates xor(euint128 a, uint128 b) and returns the result.\n     */\n    function xor(euint128 a, uint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        return euint128.wrap(Impl.xor(euint128.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates xor(uint128 a, euint128 b) and returns the result.\n     */\n    function xor(uint128 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.xor(euint128.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates eq(euint128 a, uint128 b) and returns the result.\n     */\n    function eq(euint128 a, uint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        return ebool.wrap(Impl.eq(euint128.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates eq(uint128 a, euint128 b) and returns the result.\n     */\n    function eq(uint128 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.eq(euint128.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates ne(euint128 a, uint128 b) and returns the result.\n     */\n    function ne(euint128 a, uint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        return ebool.wrap(Impl.ne(euint128.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates ne(uint128 a, euint128 b) and returns the result.\n     */\n    function ne(uint128 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.ne(euint128.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates ge(euint128 a, uint128 b) and returns the result.\n     */\n    function ge(euint128 a, uint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        return ebool.wrap(Impl.ge(euint128.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates ge(uint128 a, euint128 b) and returns the result.\n     */\n    function ge(uint128 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.le(euint128.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates gt(euint128 a, uint128 b) and returns the result.\n     */\n    function gt(euint128 a, uint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        return ebool.wrap(Impl.gt(euint128.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates gt(uint128 a, euint128 b) and returns the result.\n     */\n    function gt(uint128 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.lt(euint128.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates le(euint128 a, uint128 b) and returns the result.\n     */\n    function le(euint128 a, uint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        return ebool.wrap(Impl.le(euint128.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates le(uint128 a, euint128 b) and returns the result.\n     */\n    function le(uint128 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.ge(euint128.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates lt(euint128 a, uint128 b) and returns the result.\n     */\n    function lt(euint128 a, uint128 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        return ebool.wrap(Impl.lt(euint128.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates lt(uint128 a, euint128 b) and returns the result.\n     */\n    function lt(uint128 a, euint128 b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return ebool.wrap(Impl.gt(euint128.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates min(euint128 a, uint128 b) and returns the result.\n     */\n    function min(euint128 a, uint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        return euint128.wrap(Impl.min(euint128.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates min(uint128 a, euint128 b) and returns the result.\n     */\n    function min(uint128 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.min(euint128.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates max(euint128 a, uint128 b) and returns the result.\n     */\n    function max(euint128 a, uint128 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        return euint128.wrap(Impl.max(euint128.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates max(uint128 a, euint128 b) and returns the result.\n     */\n    function max(uint128 a, euint128 b) internal returns (euint128) {\n        if (!isInitialized(b)) {\n            b = asEuint128(0);\n        }\n        return euint128.wrap(Impl.max(euint128.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates eq(eaddress a, address b) and returns the result.\n     */\n    function eq(eaddress a, address b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEaddress(address(0));\n        }\n        return ebool.wrap(Impl.eq(eaddress.unwrap(a), bytes32(uint256(uint160(b))), true));\n    }\n\n    /**\n     * @dev Evaluates eq(address a, eaddress b) and returns the result.\n     */\n    function eq(address a, eaddress b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEaddress(address(0));\n        }\n        return ebool.wrap(Impl.eq(eaddress.unwrap(b), bytes32(uint256(uint160(a))), true));\n    }\n\n    /**\n     * @dev Evaluates ne(eaddress a, address b) and returns the result.\n     */\n    function ne(eaddress a, address b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEaddress(address(0));\n        }\n        return ebool.wrap(Impl.ne(eaddress.unwrap(a), bytes32(uint256(uint160(b))), true));\n    }\n\n    /**\n     * @dev Evaluates ne(address a, eaddress b) and returns the result.\n     */\n    function ne(address a, eaddress b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEaddress(address(0));\n        }\n        return ebool.wrap(Impl.ne(eaddress.unwrap(b), bytes32(uint256(uint160(a))), true));\n    }\n\n    /**\n     * @dev Evaluates and(euint256 a, uint256 b) and returns the result.\n     */\n    function and(euint256 a, uint256 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        return euint256.wrap(Impl.and(euint256.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates and(uint256 a, euint256 b) and returns the result.\n     */\n    function and(uint256 a, euint256 b) internal returns (euint256) {\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return euint256.wrap(Impl.and(euint256.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates or(euint256 a, uint256 b) and returns the result.\n     */\n    function or(euint256 a, uint256 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        return euint256.wrap(Impl.or(euint256.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates or(uint256 a, euint256 b) and returns the result.\n     */\n    function or(uint256 a, euint256 b) internal returns (euint256) {\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return euint256.wrap(Impl.or(euint256.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates xor(euint256 a, uint256 b) and returns the result.\n     */\n    function xor(euint256 a, uint256 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        return euint256.wrap(Impl.xor(euint256.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates xor(uint256 a, euint256 b) and returns the result.\n     */\n    function xor(uint256 a, euint256 b) internal returns (euint256) {\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return euint256.wrap(Impl.xor(euint256.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates eq(euint256 a, uint256 b) and returns the result.\n     */\n    function eq(euint256 a, uint256 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        return ebool.wrap(Impl.eq(euint256.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates eq(uint256 a, euint256 b) and returns the result.\n     */\n    function eq(uint256 a, euint256 b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return ebool.wrap(Impl.eq(euint256.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates ne(euint256 a, uint256 b) and returns the result.\n     */\n    function ne(euint256 a, uint256 b) internal returns (ebool) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        return ebool.wrap(Impl.ne(euint256.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates ne(uint256 a, euint256 b) and returns the result.\n     */\n    function ne(uint256 a, euint256 b) internal returns (ebool) {\n        if (!isInitialized(b)) {\n            b = asEuint256(0);\n        }\n        return ebool.wrap(Impl.ne(euint256.unwrap(b), bytes32(uint256(a)), true));\n    }\n\n    /**\n     * @dev Evaluates shl(euint8 a, euint8 b) and returns the result.\n     */\n    function shl(euint8 a, euint8 b) internal returns (euint8) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint8.wrap(Impl.shl(euint8.unwrap(a), euint8.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates shl(euint8 a, uint8) and returns the result.\n     */\n    function shl(euint8 a, uint8 b) internal returns (euint8) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        return euint8.wrap(Impl.shl(euint8.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates shr(euint8 a, euint8 b) and returns the result.\n     */\n    function shr(euint8 a, euint8 b) internal returns (euint8) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint8.wrap(Impl.shr(euint8.unwrap(a), euint8.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates shr(euint8 a, uint8) and returns the result.\n     */\n    function shr(euint8 a, uint8 b) internal returns (euint8) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        return euint8.wrap(Impl.shr(euint8.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates rotl(euint8 a, euint8 b) and returns the result.\n     */\n    function rotl(euint8 a, euint8 b) internal returns (euint8) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint8.wrap(Impl.rotl(euint8.unwrap(a), euint8.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates rotl(euint8 a, uint8) and returns the result.\n     */\n    function rotl(euint8 a, uint8 b) internal returns (euint8) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        return euint8.wrap(Impl.rotl(euint8.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates rotr(euint8 a, euint8 b) and returns the result.\n     */\n    function rotr(euint8 a, euint8 b) internal returns (euint8) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint8.wrap(Impl.rotr(euint8.unwrap(a), euint8.unwrap(b), false));\n    }\n\n    /**\n     * @dev Evaluates rotr(euint8 a, uint8) and returns the result.\n     */\n    function rotr(euint8 a, uint8 b) internal returns (euint8) {\n        if (!isInitialized(a)) {\n            a = asEuint8(0);\n        }\n        return euint8.wrap(Impl.rotr(euint8.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates shl(euint16 a, euint8 b) and returns the result.\n     */\n    function shl(euint16 a, euint8 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint16.wrap(Impl.shl(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\n    }\n\n    /**\n     * @dev Evaluates shl(euint16 a, uint8) and returns the result.\n     */\n    function shl(euint16 a, uint8 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        return euint16.wrap(Impl.shl(euint16.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates shr(euint16 a, euint8 b) and returns the result.\n     */\n    function shr(euint16 a, euint8 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint16.wrap(Impl.shr(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\n    }\n\n    /**\n     * @dev Evaluates shr(euint16 a, uint8) and returns the result.\n     */\n    function shr(euint16 a, uint8 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        return euint16.wrap(Impl.shr(euint16.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates rotl(euint16 a, euint8 b) and returns the result.\n     */\n    function rotl(euint16 a, euint8 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint16.wrap(Impl.rotl(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\n    }\n\n    /**\n     * @dev Evaluates rotl(euint16 a, uint8) and returns the result.\n     */\n    function rotl(euint16 a, uint8 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        return euint16.wrap(Impl.rotl(euint16.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates rotr(euint16 a, euint8 b) and returns the result.\n     */\n    function rotr(euint16 a, euint8 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint16.wrap(Impl.rotr(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\n    }\n\n    /**\n     * @dev Evaluates rotr(euint16 a, uint8) and returns the result.\n     */\n    function rotr(euint16 a, uint8 b) internal returns (euint16) {\n        if (!isInitialized(a)) {\n            a = asEuint16(0);\n        }\n        return euint16.wrap(Impl.rotr(euint16.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates shl(euint32 a, euint8 b) and returns the result.\n     */\n    function shl(euint32 a, euint8 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint32.wrap(Impl.shl(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\n    }\n\n    /**\n     * @dev Evaluates shl(euint32 a, uint8) and returns the result.\n     */\n    function shl(euint32 a, uint8 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        return euint32.wrap(Impl.shl(euint32.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates shr(euint32 a, euint8 b) and returns the result.\n     */\n    function shr(euint32 a, euint8 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint32.wrap(Impl.shr(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\n    }\n\n    /**\n     * @dev Evaluates shr(euint32 a, uint8) and returns the result.\n     */\n    function shr(euint32 a, uint8 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        return euint32.wrap(Impl.shr(euint32.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates rotl(euint32 a, euint8 b) and returns the result.\n     */\n    function rotl(euint32 a, euint8 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint32.wrap(Impl.rotl(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\n    }\n\n    /**\n     * @dev Evaluates rotl(euint32 a, uint8) and returns the result.\n     */\n    function rotl(euint32 a, uint8 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        return euint32.wrap(Impl.rotl(euint32.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates rotr(euint32 a, euint8 b) and returns the result.\n     */\n    function rotr(euint32 a, euint8 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint32.wrap(Impl.rotr(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\n    }\n\n    /**\n     * @dev Evaluates rotr(euint32 a, uint8) and returns the result.\n     */\n    function rotr(euint32 a, uint8 b) internal returns (euint32) {\n        if (!isInitialized(a)) {\n            a = asEuint32(0);\n        }\n        return euint32.wrap(Impl.rotr(euint32.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates shl(euint64 a, euint8 b) and returns the result.\n     */\n    function shl(euint64 a, euint8 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint64.wrap(Impl.shl(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates shl(euint64 a, uint8) and returns the result.\n     */\n    function shl(euint64 a, uint8 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        return euint64.wrap(Impl.shl(euint64.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates shr(euint64 a, euint8 b) and returns the result.\n     */\n    function shr(euint64 a, euint8 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint64.wrap(Impl.shr(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates shr(euint64 a, uint8) and returns the result.\n     */\n    function shr(euint64 a, uint8 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        return euint64.wrap(Impl.shr(euint64.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates rotl(euint64 a, euint8 b) and returns the result.\n     */\n    function rotl(euint64 a, euint8 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint64.wrap(Impl.rotl(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates rotl(euint64 a, uint8) and returns the result.\n     */\n    function rotl(euint64 a, uint8 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        return euint64.wrap(Impl.rotl(euint64.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates rotr(euint64 a, euint8 b) and returns the result.\n     */\n    function rotr(euint64 a, euint8 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint64.wrap(Impl.rotr(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\n    }\n\n    /**\n     * @dev Evaluates rotr(euint64 a, uint8) and returns the result.\n     */\n    function rotr(euint64 a, uint8 b) internal returns (euint64) {\n        if (!isInitialized(a)) {\n            a = asEuint64(0);\n        }\n        return euint64.wrap(Impl.rotr(euint64.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates shl(euint128 a, euint8 b) and returns the result.\n     */\n    function shl(euint128 a, euint8 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint128.wrap(Impl.shl(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates shl(euint128 a, uint8) and returns the result.\n     */\n    function shl(euint128 a, uint8 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        return euint128.wrap(Impl.shl(euint128.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates shr(euint128 a, euint8 b) and returns the result.\n     */\n    function shr(euint128 a, euint8 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint128.wrap(Impl.shr(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates shr(euint128 a, uint8) and returns the result.\n     */\n    function shr(euint128 a, uint8 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        return euint128.wrap(Impl.shr(euint128.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates rotl(euint128 a, euint8 b) and returns the result.\n     */\n    function rotl(euint128 a, euint8 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint128.wrap(Impl.rotl(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates rotl(euint128 a, uint8) and returns the result.\n     */\n    function rotl(euint128 a, uint8 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        return euint128.wrap(Impl.rotl(euint128.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates rotr(euint128 a, euint8 b) and returns the result.\n     */\n    function rotr(euint128 a, euint8 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint128.wrap(Impl.rotr(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\n    }\n\n    /**\n     * @dev Evaluates rotr(euint128 a, uint8) and returns the result.\n     */\n    function rotr(euint128 a, uint8 b) internal returns (euint128) {\n        if (!isInitialized(a)) {\n            a = asEuint128(0);\n        }\n        return euint128.wrap(Impl.rotr(euint128.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates shl(euint256 a, euint8 b) and returns the result.\n     */\n    function shl(euint256 a, euint8 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint256.wrap(Impl.shl(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\n    }\n\n    /**\n     * @dev Evaluates shl(euint256 a, uint8) and returns the result.\n     */\n    function shl(euint256 a, uint8 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        return euint256.wrap(Impl.shl(euint256.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates shr(euint256 a, euint8 b) and returns the result.\n     */\n    function shr(euint256 a, euint8 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint256.wrap(Impl.shr(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\n    }\n\n    /**\n     * @dev Evaluates shr(euint256 a, uint8) and returns the result.\n     */\n    function shr(euint256 a, uint8 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        return euint256.wrap(Impl.shr(euint256.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates rotl(euint256 a, euint8 b) and returns the result.\n     */\n    function rotl(euint256 a, euint8 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint256.wrap(Impl.rotl(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\n    }\n\n    /**\n     * @dev Evaluates rotl(euint256 a, uint8) and returns the result.\n     */\n    function rotl(euint256 a, uint8 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        return euint256.wrap(Impl.rotl(euint256.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev Evaluates rotr(euint256 a, euint8 b) and returns the result.\n     */\n    function rotr(euint256 a, euint8 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        if (!isInitialized(b)) {\n            b = asEuint8(0);\n        }\n        return euint256.wrap(Impl.rotr(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\n    }\n\n    /**\n     * @dev Evaluates rotr(euint256 a, uint8) and returns the result.\n     */\n    function rotr(euint256 a, uint8 b) internal returns (euint256) {\n        if (!isInitialized(a)) {\n            a = asEuint256(0);\n        }\n        return euint256.wrap(Impl.rotr(euint256.unwrap(a), bytes32(uint256(b)), true));\n    }\n\n    /**\n     * @dev If 'control's value is 'true', the result has the same value as 'ifTrue'.\n     *      If 'control's value is 'false', the result has the same value as 'ifFalse'.\n     */\n    function select(ebool control, ebool a, ebool b) internal returns (ebool) {\n        return ebool.wrap(Impl.select(ebool.unwrap(control), ebool.unwrap(a), ebool.unwrap(b)));\n    }\n    /**\n     * @dev If 'control's value is 'true', the result has the same value as 'ifTrue'.\n     *      If 'control's value is 'false', the result has the same value as 'ifFalse'.\n     */\n    function select(ebool control, euint8 a, euint8 b) internal returns (euint8) {\n        return euint8.wrap(Impl.select(ebool.unwrap(control), euint8.unwrap(a), euint8.unwrap(b)));\n    }\n    /**\n     * @dev If 'control's value is 'true', the result has the same value as 'ifTrue'.\n     *      If 'control's value is 'false', the result has the same value as 'ifFalse'.\n     */\n    function select(ebool control, euint16 a, euint16 b) internal returns (euint16) {\n        return euint16.wrap(Impl.select(ebool.unwrap(control), euint16.unwrap(a), euint16.unwrap(b)));\n    }\n    /**\n     * @dev If 'control's value is 'true', the result has the same value as 'ifTrue'.\n     *      If 'control's value is 'false', the result has the same value as 'ifFalse'.\n     */\n    function select(ebool control, euint32 a, euint32 b) internal returns (euint32) {\n        return euint32.wrap(Impl.select(ebool.unwrap(control), euint32.unwrap(a), euint32.unwrap(b)));\n    }\n    /**\n     * @dev If 'control's value is 'true', the result has the same value as 'ifTrue'.\n     *      If 'control's value is 'false', the result has the same value as 'ifFalse'.\n     */\n    function select(ebool control, euint64 a, euint64 b) internal returns (euint64) {\n        return euint64.wrap(Impl.select(ebool.unwrap(control), euint64.unwrap(a), euint64.unwrap(b)));\n    }\n    /**\n     * @dev If 'control's value is 'true', the result has the same value as 'ifTrue'.\n     *      If 'control's value is 'false', the result has the same value as 'ifFalse'.\n     */\n    function select(ebool control, euint128 a, euint128 b) internal returns (euint128) {\n        return euint128.wrap(Impl.select(ebool.unwrap(control), euint128.unwrap(a), euint128.unwrap(b)));\n    }\n    /**\n     * @dev If 'control's value is 'true', the result has the same value as 'ifTrue'.\n     *      If 'control's value is 'false', the result has the same value as 'ifFalse'.\n     */\n    function select(ebool control, eaddress a, eaddress b) internal returns (eaddress) {\n        return eaddress.wrap(Impl.select(ebool.unwrap(control), eaddress.unwrap(a), eaddress.unwrap(b)));\n    }\n    /**\n     * @dev If 'control's value is 'true', the result has the same value as 'ifTrue'.\n     *      If 'control's value is 'false', the result has the same value as 'ifFalse'.\n     */\n    function select(ebool control, euint256 a, euint256 b) internal returns (euint256) {\n        return euint256.wrap(Impl.select(ebool.unwrap(control), euint256.unwrap(a), euint256.unwrap(b)));\n    }\n    /**\n     * @dev Casts an encrypted integer from 'euint16' to 'euint8'.\n     */\n    function asEuint8(euint16 value) internal returns (euint8) {\n        return euint8.wrap(Impl.cast(euint16.unwrap(value), FheType.Uint8));\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint32' to 'euint8'.\n     */\n    function asEuint8(euint32 value) internal returns (euint8) {\n        return euint8.wrap(Impl.cast(euint32.unwrap(value), FheType.Uint8));\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint64' to 'euint8'.\n     */\n    function asEuint8(euint64 value) internal returns (euint8) {\n        return euint8.wrap(Impl.cast(euint64.unwrap(value), FheType.Uint8));\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint128' to 'euint8'.\n     */\n    function asEuint8(euint128 value) internal returns (euint8) {\n        return euint8.wrap(Impl.cast(euint128.unwrap(value), FheType.Uint8));\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint256' to 'euint8'.\n     */\n    function asEuint8(euint256 value) internal returns (euint8) {\n        return euint8.wrap(Impl.cast(euint256.unwrap(value), FheType.Uint8));\n    }\n\n    /**\n    /** \n     * @dev Converts an 'ebool' to an 'euint8'.\n     */\n    function asEuint8(ebool b) internal returns (euint8) {\n        return euint8.wrap(Impl.cast(ebool.unwrap(b), FheType.Uint8));\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint8' to 'ebool'.\n     */\n    function asEbool(euint8 value) internal returns (ebool) {\n        return ne(value, 0);\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint8' to 'euint16'.\n     */\n    function asEuint16(euint8 value) internal returns (euint16) {\n        return euint16.wrap(Impl.cast(euint8.unwrap(value), FheType.Uint16));\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint32' to 'euint16'.\n     */\n    function asEuint16(euint32 value) internal returns (euint16) {\n        return euint16.wrap(Impl.cast(euint32.unwrap(value), FheType.Uint16));\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint64' to 'euint16'.\n     */\n    function asEuint16(euint64 value) internal returns (euint16) {\n        return euint16.wrap(Impl.cast(euint64.unwrap(value), FheType.Uint16));\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint128' to 'euint16'.\n     */\n    function asEuint16(euint128 value) internal returns (euint16) {\n        return euint16.wrap(Impl.cast(euint128.unwrap(value), FheType.Uint16));\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint256' to 'euint16'.\n     */\n    function asEuint16(euint256 value) internal returns (euint16) {\n        return euint16.wrap(Impl.cast(euint256.unwrap(value), FheType.Uint16));\n    }\n\n    /**\n    /** \n     * @dev Converts an 'ebool' to an 'euint16'.\n     */\n    function asEuint16(ebool b) internal returns (euint16) {\n        return euint16.wrap(Impl.cast(ebool.unwrap(b), FheType.Uint16));\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint16' to 'ebool'.\n     */\n    function asEbool(euint16 value) internal returns (ebool) {\n        return ne(value, 0);\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint8' to 'euint32'.\n     */\n    function asEuint32(euint8 value) internal returns (euint32) {\n        return euint32.wrap(Impl.cast(euint8.unwrap(value), FheType.Uint32));\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint16' to 'euint32'.\n     */\n    function asEuint32(euint16 value) internal returns (euint32) {\n        return euint32.wrap(Impl.cast(euint16.unwrap(value), FheType.Uint32));\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint64' to 'euint32'.\n     */\n    function asEuint32(euint64 value) internal returns (euint32) {\n        return euint32.wrap(Impl.cast(euint64.unwrap(value), FheType.Uint32));\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint128' to 'euint32'.\n     */\n    function asEuint32(euint128 value) internal returns (euint32) {\n        return euint32.wrap(Impl.cast(euint128.unwrap(value), FheType.Uint32));\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint256' to 'euint32'.\n     */\n    function asEuint32(euint256 value) internal returns (euint32) {\n        return euint32.wrap(Impl.cast(euint256.unwrap(value), FheType.Uint32));\n    }\n\n    /**\n    /** \n     * @dev Converts an 'ebool' to an 'euint32'.\n     */\n    function asEuint32(ebool b) internal returns (euint32) {\n        return euint32.wrap(Impl.cast(ebool.unwrap(b), FheType.Uint32));\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint32' to 'ebool'.\n     */\n    function asEbool(euint32 value) internal returns (ebool) {\n        return ne(value, 0);\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint8' to 'euint64'.\n     */\n    function asEuint64(euint8 value) internal returns (euint64) {\n        return euint64.wrap(Impl.cast(euint8.unwrap(value), FheType.Uint64));\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint16' to 'euint64'.\n     */\n    function asEuint64(euint16 value) internal returns (euint64) {\n        return euint64.wrap(Impl.cast(euint16.unwrap(value), FheType.Uint64));\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint32' to 'euint64'.\n     */\n    function asEuint64(euint32 value) internal returns (euint64) {\n        return euint64.wrap(Impl.cast(euint32.unwrap(value), FheType.Uint64));\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint128' to 'euint64'.\n     */\n    function asEuint64(euint128 value) internal returns (euint64) {\n        return euint64.wrap(Impl.cast(euint128.unwrap(value), FheType.Uint64));\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint256' to 'euint64'.\n     */\n    function asEuint64(euint256 value) internal returns (euint64) {\n        return euint64.wrap(Impl.cast(euint256.unwrap(value), FheType.Uint64));\n    }\n\n    /**\n    /** \n     * @dev Converts an 'ebool' to an 'euint64'.\n     */\n    function asEuint64(ebool b) internal returns (euint64) {\n        return euint64.wrap(Impl.cast(ebool.unwrap(b), FheType.Uint64));\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint64' to 'ebool'.\n     */\n    function asEbool(euint64 value) internal returns (ebool) {\n        return ne(value, 0);\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint8' to 'euint128'.\n     */\n    function asEuint128(euint8 value) internal returns (euint128) {\n        return euint128.wrap(Impl.cast(euint8.unwrap(value), FheType.Uint128));\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint16' to 'euint128'.\n     */\n    function asEuint128(euint16 value) internal returns (euint128) {\n        return euint128.wrap(Impl.cast(euint16.unwrap(value), FheType.Uint128));\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint32' to 'euint128'.\n     */\n    function asEuint128(euint32 value) internal returns (euint128) {\n        return euint128.wrap(Impl.cast(euint32.unwrap(value), FheType.Uint128));\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint64' to 'euint128'.\n     */\n    function asEuint128(euint64 value) internal returns (euint128) {\n        return euint128.wrap(Impl.cast(euint64.unwrap(value), FheType.Uint128));\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint256' to 'euint128'.\n     */\n    function asEuint128(euint256 value) internal returns (euint128) {\n        return euint128.wrap(Impl.cast(euint256.unwrap(value), FheType.Uint128));\n    }\n\n    /**\n    /** \n     * @dev Converts an 'ebool' to an 'euint128'.\n     */\n    function asEuint128(ebool b) internal returns (euint128) {\n        return euint128.wrap(Impl.cast(ebool.unwrap(b), FheType.Uint128));\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint128' to 'ebool'.\n     */\n    function asEbool(euint128 value) internal returns (ebool) {\n        return ne(value, 0);\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint8' to 'euint256'.\n     */\n    function asEuint256(euint8 value) internal returns (euint256) {\n        return euint256.wrap(Impl.cast(euint8.unwrap(value), FheType.Uint256));\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint16' to 'euint256'.\n     */\n    function asEuint256(euint16 value) internal returns (euint256) {\n        return euint256.wrap(Impl.cast(euint16.unwrap(value), FheType.Uint256));\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint32' to 'euint256'.\n     */\n    function asEuint256(euint32 value) internal returns (euint256) {\n        return euint256.wrap(Impl.cast(euint32.unwrap(value), FheType.Uint256));\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint64' to 'euint256'.\n     */\n    function asEuint256(euint64 value) internal returns (euint256) {\n        return euint256.wrap(Impl.cast(euint64.unwrap(value), FheType.Uint256));\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint128' to 'euint256'.\n     */\n    function asEuint256(euint128 value) internal returns (euint256) {\n        return euint256.wrap(Impl.cast(euint128.unwrap(value), FheType.Uint256));\n    }\n\n    /**\n    /** \n     * @dev Converts an 'ebool' to an 'euint256'.\n     */\n    function asEuint256(ebool b) internal returns (euint256) {\n        return euint256.wrap(Impl.cast(ebool.unwrap(b), FheType.Uint256));\n    }\n\n    /**\n     * @dev Casts an encrypted integer from 'euint256' to 'ebool'.\n     */\n    function asEbool(euint256 value) internal returns (ebool) {\n        return ne(value, 0);\n    }\n\n    /**\n     * @dev Evaluates not(ebool value) and returns the result.\n     */\n    function not(ebool value) internal returns (ebool) {\n        return ebool.wrap(Impl.not(ebool.unwrap(value)));\n    }\n\n    /**\n     * @dev Evaluates neg(euint8 value) and returns the result.\n     */\n    function neg(euint8 value) internal returns (euint8) {\n        return euint8.wrap(Impl.neg(euint8.unwrap(value)));\n    }\n\n    /**\n     * @dev Evaluates not(euint8 value) and returns the result.\n     */\n    function not(euint8 value) internal returns (euint8) {\n        return euint8.wrap(Impl.not(euint8.unwrap(value)));\n    }\n\n    /**\n     * @dev Evaluates neg(euint16 value) and returns the result.\n     */\n    function neg(euint16 value) internal returns (euint16) {\n        return euint16.wrap(Impl.neg(euint16.unwrap(value)));\n    }\n\n    /**\n     * @dev Evaluates not(euint16 value) and returns the result.\n     */\n    function not(euint16 value) internal returns (euint16) {\n        return euint16.wrap(Impl.not(euint16.unwrap(value)));\n    }\n\n    /**\n     * @dev Evaluates neg(euint32 value) and returns the result.\n     */\n    function neg(euint32 value) internal returns (euint32) {\n        return euint32.wrap(Impl.neg(euint32.unwrap(value)));\n    }\n\n    /**\n     * @dev Evaluates not(euint32 value) and returns the result.\n     */\n    function not(euint32 value) internal returns (euint32) {\n        return euint32.wrap(Impl.not(euint32.unwrap(value)));\n    }\n\n    /**\n     * @dev Evaluates neg(euint64 value) and returns the result.\n     */\n    function neg(euint64 value) internal returns (euint64) {\n        return euint64.wrap(Impl.neg(euint64.unwrap(value)));\n    }\n\n    /**\n     * @dev Evaluates not(euint64 value) and returns the result.\n     */\n    function not(euint64 value) internal returns (euint64) {\n        return euint64.wrap(Impl.not(euint64.unwrap(value)));\n    }\n\n    /**\n     * @dev Evaluates neg(euint128 value) and returns the result.\n     */\n    function neg(euint128 value) internal returns (euint128) {\n        return euint128.wrap(Impl.neg(euint128.unwrap(value)));\n    }\n\n    /**\n     * @dev Evaluates not(euint128 value) and returns the result.\n     */\n    function not(euint128 value) internal returns (euint128) {\n        return euint128.wrap(Impl.not(euint128.unwrap(value)));\n    }\n\n    /**\n     * @dev Evaluates neg(euint256 value) and returns the result.\n     */\n    function neg(euint256 value) internal returns (euint256) {\n        return euint256.wrap(Impl.neg(euint256.unwrap(value)));\n    }\n\n    /**\n     * @dev Evaluates not(euint256 value) and returns the result.\n     */\n    function not(euint256 value) internal returns (euint256) {\n        return euint256.wrap(Impl.not(euint256.unwrap(value)));\n    }\n\n    /**\n     * @dev Convert an inputHandle with corresponding inputProof to an encrypted ebool integer.\n     */\n    function fromExternal(externalEbool inputHandle, bytes memory inputProof) internal returns (ebool) {\n        return ebool.wrap(Impl.verify(externalEbool.unwrap(inputHandle), inputProof, FheType.Bool));\n    }\n\n    /**\n     * @dev Converts a plaintext boolean to an encrypted boolean.\n     */\n    function asEbool(bool value) internal returns (ebool) {\n        return ebool.wrap(Impl.trivialEncrypt(value ? 1 : 0, FheType.Bool));\n    }\n\n    /**\n     * @dev Convert an inputHandle with corresponding inputProof to an encrypted euint8 integer.\n     */\n    function fromExternal(externalEuint8 inputHandle, bytes memory inputProof) internal returns (euint8) {\n        return euint8.wrap(Impl.verify(externalEuint8.unwrap(inputHandle), inputProof, FheType.Uint8));\n    }\n\n    /**\n     * @dev Convert a plaintext value to an encrypted euint8 integer.\n     */\n    function asEuint8(uint8 value) internal returns (euint8) {\n        return euint8.wrap(Impl.trivialEncrypt(uint256(value), FheType.Uint8));\n    }\n\n    /**\n     * @dev Convert an inputHandle with corresponding inputProof to an encrypted euint16 integer.\n     */\n    function fromExternal(externalEuint16 inputHandle, bytes memory inputProof) internal returns (euint16) {\n        return euint16.wrap(Impl.verify(externalEuint16.unwrap(inputHandle), inputProof, FheType.Uint16));\n    }\n\n    /**\n     * @dev Convert a plaintext value to an encrypted euint16 integer.\n     */\n    function asEuint16(uint16 value) internal returns (euint16) {\n        return euint16.wrap(Impl.trivialEncrypt(uint256(value), FheType.Uint16));\n    }\n\n    /**\n     * @dev Convert an inputHandle with corresponding inputProof to an encrypted euint32 integer.\n     */\n    function fromExternal(externalEuint32 inputHandle, bytes memory inputProof) internal returns (euint32) {\n        return euint32.wrap(Impl.verify(externalEuint32.unwrap(inputHandle), inputProof, FheType.Uint32));\n    }\n\n    /**\n     * @dev Convert a plaintext value to an encrypted euint32 integer.\n     */\n    function asEuint32(uint32 value) internal returns (euint32) {\n        return euint32.wrap(Impl.trivialEncrypt(uint256(value), FheType.Uint32));\n    }\n\n    /**\n     * @dev Convert an inputHandle with corresponding inputProof to an encrypted euint64 integer.\n     */\n    function fromExternal(externalEuint64 inputHandle, bytes memory inputProof) internal returns (euint64) {\n        return euint64.wrap(Impl.verify(externalEuint64.unwrap(inputHandle), inputProof, FheType.Uint64));\n    }\n\n    /**\n     * @dev Convert a plaintext value to an encrypted euint64 integer.\n     */\n    function asEuint64(uint64 value) internal returns (euint64) {\n        return euint64.wrap(Impl.trivialEncrypt(uint256(value), FheType.Uint64));\n    }\n\n    /**\n     * @dev Convert an inputHandle with corresponding inputProof to an encrypted euint128 integer.\n     */\n    function fromExternal(externalEuint128 inputHandle, bytes memory inputProof) internal returns (euint128) {\n        return euint128.wrap(Impl.verify(externalEuint128.unwrap(inputHandle), inputProof, FheType.Uint128));\n    }\n\n    /**\n     * @dev Convert a plaintext value to an encrypted euint128 integer.\n     */\n    function asEuint128(uint128 value) internal returns (euint128) {\n        return euint128.wrap(Impl.trivialEncrypt(uint256(value), FheType.Uint128));\n    }\n\n    /**\n     * @dev Convert an inputHandle with corresponding inputProof to an encrypted eaddress integer.\n     */\n    function fromExternal(externalEaddress inputHandle, bytes memory inputProof) internal returns (eaddress) {\n        return eaddress.wrap(Impl.verify(externalEaddress.unwrap(inputHandle), inputProof, FheType.Uint160));\n    }\n\n    /**\n     * @dev Convert a plaintext value to an encrypted eaddress integer.\n     */\n    function asEaddress(address value) internal returns (eaddress) {\n        return eaddress.wrap(Impl.trivialEncrypt(uint256(uint160(value)), FheType.Uint160));\n    }\n\n    /**\n     * @dev Convert an inputHandle with corresponding inputProof to an encrypted euint256 integer.\n     */\n    function fromExternal(externalEuint256 inputHandle, bytes memory inputProof) internal returns (euint256) {\n        return euint256.wrap(Impl.verify(externalEuint256.unwrap(inputHandle), inputProof, FheType.Uint256));\n    }\n\n    /**\n     * @dev Convert a plaintext value to an encrypted euint256 integer.\n     */\n    function asEuint256(uint256 value) internal returns (euint256) {\n        return euint256.wrap(Impl.trivialEncrypt(uint256(value), FheType.Uint256));\n    }\n\n    /**\n     * @dev Generates a random encrypted value.\n     */\n    function randEbool() internal returns (ebool) {\n        return ebool.wrap(Impl.rand(FheType.Bool));\n    }\n\n    /**\n     * @dev Generates a random encrypted value.\n     */\n    function randEuint8() internal returns (euint8) {\n        return euint8.wrap(Impl.rand(FheType.Uint8));\n    }\n\n    /**\n     * @dev Generates a random encrypted 8-bit unsigned integer in the [0, upperBound) range.\n     *      The upperBound must be a power of 2.\n     */\n    function randEuint8(uint8 upperBound) internal returns (euint8) {\n        return euint8.wrap(Impl.randBounded(upperBound, FheType.Uint8));\n    }\n\n    /**\n     * @dev Generates a random encrypted value.\n     */\n    function randEuint16() internal returns (euint16) {\n        return euint16.wrap(Impl.rand(FheType.Uint16));\n    }\n\n    /**\n     * @dev Generates a random encrypted 16-bit unsigned integer in the [0, upperBound) range.\n     *      The upperBound must be a power of 2.\n     */\n    function randEuint16(uint16 upperBound) internal returns (euint16) {\n        return euint16.wrap(Impl.randBounded(upperBound, FheType.Uint16));\n    }\n\n    /**\n     * @dev Generates a random encrypted value.\n     */\n    function randEuint32() internal returns (euint32) {\n        return euint32.wrap(Impl.rand(FheType.Uint32));\n    }\n\n    /**\n     * @dev Generates a random encrypted 32-bit unsigned integer in the [0, upperBound) range.\n     *      The upperBound must be a power of 2.\n     */\n    function randEuint32(uint32 upperBound) internal returns (euint32) {\n        return euint32.wrap(Impl.randBounded(upperBound, FheType.Uint32));\n    }\n\n    /**\n     * @dev Generates a random encrypted value.\n     */\n    function randEuint64() internal returns (euint64) {\n        return euint64.wrap(Impl.rand(FheType.Uint64));\n    }\n\n    /**\n     * @dev Generates a random encrypted 64-bit unsigned integer in the [0, upperBound) range.\n     *      The upperBound must be a power of 2.\n     */\n    function randEuint64(uint64 upperBound) internal returns (euint64) {\n        return euint64.wrap(Impl.randBounded(upperBound, FheType.Uint64));\n    }\n\n    /**\n     * @dev Generates a random encrypted value.\n     */\n    function randEuint128() internal returns (euint128) {\n        return euint128.wrap(Impl.rand(FheType.Uint128));\n    }\n\n    /**\n     * @dev Generates a random encrypted 128-bit unsigned integer in the [0, upperBound) range.\n     *      The upperBound must be a power of 2.\n     */\n    function randEuint128(uint128 upperBound) internal returns (euint128) {\n        return euint128.wrap(Impl.randBounded(upperBound, FheType.Uint128));\n    }\n\n    /**\n     * @dev Generates a random encrypted value.\n     */\n    function randEuint256() internal returns (euint256) {\n        return euint256.wrap(Impl.rand(FheType.Uint256));\n    }\n\n    /**\n     * @dev Generates a random encrypted 256-bit unsigned integer in the [0, upperBound) range.\n     *      The upperBound must be a power of 2.\n     */\n    function randEuint256(uint256 upperBound) internal returns (euint256) {\n        return euint256.wrap(Impl.randBounded(upperBound, FheType.Uint256));\n    }\n\n    /**\n     * @dev This function cleans the transient storage for the ACL (accounts) and the InputVerifier\n     *      (input proofs).\n     *      This could be useful for integration with Account Abstraction when bundling several\n     *      UserOps calling the FHEVMExecutor.\n     */\n    function cleanTransientStorage() internal {\n        Impl.cleanTransientStorageACL();\n        Impl.cleanTransientStorageInputVerifier();\n    }\n\n    /**\n     * @dev Returns whether the account is allowed to use the value.\n     */\n    function isAllowed(ebool value, address account) internal view returns (bool) {\n        return Impl.isAllowed(ebool.unwrap(value), account);\n    }\n\n    /**\n     * @dev Returns whether the sender is allowed to use the value.\n     */\n    function isSenderAllowed(ebool value) internal view returns (bool) {\n        return Impl.isAllowed(ebool.unwrap(value), msg.sender);\n    }\n\n    /**\n     * @dev Allows the use of value for the address account.\n     */\n    function allow(ebool value, address account) internal returns (ebool) {\n        Impl.allow(ebool.unwrap(value), account);\n        return value;\n    }\n\n    /**\n     * @dev Allows the use of value for this address (address(this)).\n     */\n    function allowThis(ebool value) internal returns (ebool) {\n        Impl.allow(ebool.unwrap(value), address(this));\n        return value;\n    }\n\n    /**\n     * @dev Allows the use of value by address account for this transaction.\n     */\n    function allowTransient(ebool value, address account) internal returns (ebool) {\n        Impl.allowTransient(ebool.unwrap(value), account);\n        return value;\n    }\n\n    /**\n     * @dev Makes the value publicly decryptable.\n     */\n    function makePubliclyDecryptable(ebool value) internal returns (ebool) {\n        Impl.makePubliclyDecryptable(ebool.unwrap(value));\n        return value;\n    }\n\n    /**\n     * @dev Returns whether the the value is publicly decryptable.\n     */\n    function isPubliclyDecryptable(ebool value) internal view returns (bool) {\n        return Impl.isPubliclyDecryptable(ebool.unwrap(value));\n    }\n\n    /**\n     * @dev Returns whether the account is allowed to use the value.\n     */\n    function isAllowed(euint8 value, address account) internal view returns (bool) {\n        return Impl.isAllowed(euint8.unwrap(value), account);\n    }\n\n    /**\n     * @dev Returns whether the sender is allowed to use the value.\n     */\n    function isSenderAllowed(euint8 value) internal view returns (bool) {\n        return Impl.isAllowed(euint8.unwrap(value), msg.sender);\n    }\n\n    /**\n     * @dev Allows the use of value for the address account.\n     */\n    function allow(euint8 value, address account) internal returns (euint8) {\n        Impl.allow(euint8.unwrap(value), account);\n        return value;\n    }\n\n    /**\n     * @dev Allows the use of value for this address (address(this)).\n     */\n    function allowThis(euint8 value) internal returns (euint8) {\n        Impl.allow(euint8.unwrap(value), address(this));\n        return value;\n    }\n\n    /**\n     * @dev Allows the use of value by address account for this transaction.\n     */\n    function allowTransient(euint8 value, address account) internal returns (euint8) {\n        Impl.allowTransient(euint8.unwrap(value), account);\n        return value;\n    }\n\n    /**\n     * @dev Makes the value publicly decryptable.\n     */\n    function makePubliclyDecryptable(euint8 value) internal returns (euint8) {\n        Impl.makePubliclyDecryptable(euint8.unwrap(value));\n        return value;\n    }\n\n    /**\n     * @dev Returns whether the the value is publicly decryptable.\n     */\n    function isPubliclyDecryptable(euint8 value) internal view returns (bool) {\n        return Impl.isPubliclyDecryptable(euint8.unwrap(value));\n    }\n\n    /**\n     * @dev Returns whether the account is allowed to use the value.\n     */\n    function isAllowed(euint16 value, address account) internal view returns (bool) {\n        return Impl.isAllowed(euint16.unwrap(value), account);\n    }\n\n    /**\n     * @dev Returns whether the sender is allowed to use the value.\n     */\n    function isSenderAllowed(euint16 value) internal view returns (bool) {\n        return Impl.isAllowed(euint16.unwrap(value), msg.sender);\n    }\n\n    /**\n     * @dev Allows the use of value for the address account.\n     */\n    function allow(euint16 value, address account) internal returns (euint16) {\n        Impl.allow(euint16.unwrap(value), account);\n        return value;\n    }\n\n    /**\n     * @dev Allows the use of value for this address (address(this)).\n     */\n    function allowThis(euint16 value) internal returns (euint16) {\n        Impl.allow(euint16.unwrap(value), address(this));\n        return value;\n    }\n\n    /**\n     * @dev Allows the use of value by address account for this transaction.\n     */\n    function allowTransient(euint16 value, address account) internal returns (euint16) {\n        Impl.allowTransient(euint16.unwrap(value), account);\n        return value;\n    }\n\n    /**\n     * @dev Makes the value publicly decryptable.\n     */\n    function makePubliclyDecryptable(euint16 value) internal returns (euint16) {\n        Impl.makePubliclyDecryptable(euint16.unwrap(value));\n        return value;\n    }\n\n    /**\n     * @dev Returns whether the the value is publicly decryptable.\n     */\n    function isPubliclyDecryptable(euint16 value) internal view returns (bool) {\n        return Impl.isPubliclyDecryptable(euint16.unwrap(value));\n    }\n\n    /**\n     * @dev Returns whether the account is allowed to use the value.\n     */\n    function isAllowed(euint32 value, address account) internal view returns (bool) {\n        return Impl.isAllowed(euint32.unwrap(value), account);\n    }\n\n    /**\n     * @dev Returns whether the sender is allowed to use the value.\n     */\n    function isSenderAllowed(euint32 value) internal view returns (bool) {\n        return Impl.isAllowed(euint32.unwrap(value), msg.sender);\n    }\n\n    /**\n     * @dev Allows the use of value for the address account.\n     */\n    function allow(euint32 value, address account) internal returns (euint32) {\n        Impl.allow(euint32.unwrap(value), account);\n        return value;\n    }\n\n    /**\n     * @dev Allows the use of value for this address (address(this)).\n     */\n    function allowThis(euint32 value) internal returns (euint32) {\n        Impl.allow(euint32.unwrap(value), address(this));\n        return value;\n    }\n\n    /**\n     * @dev Allows the use of value by address account for this transaction.\n     */\n    function allowTransient(euint32 value, address account) internal returns (euint32) {\n        Impl.allowTransient(euint32.unwrap(value), account);\n        return value;\n    }\n\n    /**\n     * @dev Makes the value publicly decryptable.\n     */\n    function makePubliclyDecryptable(euint32 value) internal returns (euint32) {\n        Impl.makePubliclyDecryptable(euint32.unwrap(value));\n        return value;\n    }\n\n    /**\n     * @dev Returns whether the the value is publicly decryptable.\n     */\n    function isPubliclyDecryptable(euint32 value) internal view returns (bool) {\n        return Impl.isPubliclyDecryptable(euint32.unwrap(value));\n    }\n\n    /**\n     * @dev Returns whether the account is allowed to use the value.\n     */\n    function isAllowed(euint64 value, address account) internal view returns (bool) {\n        return Impl.isAllowed(euint64.unwrap(value), account);\n    }\n\n    /**\n     * @dev Returns whether the sender is allowed to use the value.\n     */\n    function isSenderAllowed(euint64 value) internal view returns (bool) {\n        return Impl.isAllowed(euint64.unwrap(value), msg.sender);\n    }\n\n    /**\n     * @dev Allows the use of value for the address account.\n     */\n    function allow(euint64 value, address account) internal returns (euint64) {\n        Impl.allow(euint64.unwrap(value), account);\n        return value;\n    }\n\n    /**\n     * @dev Allows the use of value for this address (address(this)).\n     */\n    function allowThis(euint64 value) internal returns (euint64) {\n        Impl.allow(euint64.unwrap(value), address(this));\n        return value;\n    }\n\n    /**\n     * @dev Allows the use of value by address account for this transaction.\n     */\n    function allowTransient(euint64 value, address account) internal returns (euint64) {\n        Impl.allowTransient(euint64.unwrap(value), account);\n        return value;\n    }\n\n    /**\n     * @dev Makes the value publicly decryptable.\n     */\n    function makePubliclyDecryptable(euint64 value) internal returns (euint64) {\n        Impl.makePubliclyDecryptable(euint64.unwrap(value));\n        return value;\n    }\n\n    /**\n     * @dev Returns whether the the value is publicly decryptable.\n     */\n    function isPubliclyDecryptable(euint64 value) internal view returns (bool) {\n        return Impl.isPubliclyDecryptable(euint64.unwrap(value));\n    }\n\n    /**\n     * @dev Returns whether the account is allowed to use the value.\n     */\n    function isAllowed(euint128 value, address account) internal view returns (bool) {\n        return Impl.isAllowed(euint128.unwrap(value), account);\n    }\n\n    /**\n     * @dev Returns whether the sender is allowed to use the value.\n     */\n    function isSenderAllowed(euint128 value) internal view returns (bool) {\n        return Impl.isAllowed(euint128.unwrap(value), msg.sender);\n    }\n\n    /**\n     * @dev Allows the use of value for the address account.\n     */\n    function allow(euint128 value, address account) internal returns (euint128) {\n        Impl.allow(euint128.unwrap(value), account);\n        return value;\n    }\n\n    /**\n     * @dev Allows the use of value for this address (address(this)).\n     */\n    function allowThis(euint128 value) internal returns (euint128) {\n        Impl.allow(euint128.unwrap(value), address(this));\n        return value;\n    }\n\n    /**\n     * @dev Allows the use of value by address account for this transaction.\n     */\n    function allowTransient(euint128 value, address account) internal returns (euint128) {\n        Impl.allowTransient(euint128.unwrap(value), account);\n        return value;\n    }\n\n    /**\n     * @dev Makes the value publicly decryptable.\n     */\n    function makePubliclyDecryptable(euint128 value) internal returns (euint128) {\n        Impl.makePubliclyDecryptable(euint128.unwrap(value));\n        return value;\n    }\n\n    /**\n     * @dev Returns whether the the value is publicly decryptable.\n     */\n    function isPubliclyDecryptable(euint128 value) internal view returns (bool) {\n        return Impl.isPubliclyDecryptable(euint128.unwrap(value));\n    }\n\n    /**\n     * @dev Returns whether the account is allowed to use the value.\n     */\n    function isAllowed(eaddress value, address account) internal view returns (bool) {\n        return Impl.isAllowed(eaddress.unwrap(value), account);\n    }\n\n    /**\n     * @dev Returns whether the sender is allowed to use the value.\n     */\n    function isSenderAllowed(eaddress value) internal view returns (bool) {\n        return Impl.isAllowed(eaddress.unwrap(value), msg.sender);\n    }\n\n    /**\n     * @dev Allows the use of value for the address account.\n     */\n    function allow(eaddress value, address account) internal returns (eaddress) {\n        Impl.allow(eaddress.unwrap(value), account);\n        return value;\n    }\n\n    /**\n     * @dev Allows the use of value for this address (address(this)).\n     */\n    function allowThis(eaddress value) internal returns (eaddress) {\n        Impl.allow(eaddress.unwrap(value), address(this));\n        return value;\n    }\n\n    /**\n     * @dev Allows the use of value by address account for this transaction.\n     */\n    function allowTransient(eaddress value, address account) internal returns (eaddress) {\n        Impl.allowTransient(eaddress.unwrap(value), account);\n        return value;\n    }\n\n    /**\n     * @dev Makes the value publicly decryptable.\n     */\n    function makePubliclyDecryptable(eaddress value) internal returns (eaddress) {\n        Impl.makePubliclyDecryptable(eaddress.unwrap(value));\n        return value;\n    }\n\n    /**\n     * @dev Returns whether the the value is publicly decryptable.\n     */\n    function isPubliclyDecryptable(eaddress value) internal view returns (bool) {\n        return Impl.isPubliclyDecryptable(eaddress.unwrap(value));\n    }\n\n    /**\n     * @dev Returns whether the account is allowed to use the value.\n     */\n    function isAllowed(euint256 value, address account) internal view returns (bool) {\n        return Impl.isAllowed(euint256.unwrap(value), account);\n    }\n\n    /**\n     * @dev Returns whether the sender is allowed to use the value.\n     */\n    function isSenderAllowed(euint256 value) internal view returns (bool) {\n        return Impl.isAllowed(euint256.unwrap(value), msg.sender);\n    }\n\n    /**\n     * @dev Allows the use of value for the address account.\n     */\n    function allow(euint256 value, address account) internal returns (euint256) {\n        Impl.allow(euint256.unwrap(value), account);\n        return value;\n    }\n\n    /**\n     * @dev Allows the use of value for this address (address(this)).\n     */\n    function allowThis(euint256 value) internal returns (euint256) {\n        Impl.allow(euint256.unwrap(value), address(this));\n        return value;\n    }\n\n    /**\n     * @dev Allows the use of value by address account for this transaction.\n     */\n    function allowTransient(euint256 value, address account) internal returns (euint256) {\n        Impl.allowTransient(euint256.unwrap(value), account);\n        return value;\n    }\n\n    /**\n     * @dev Makes the value publicly decryptable.\n     */\n    function makePubliclyDecryptable(euint256 value) internal returns (euint256) {\n        Impl.makePubliclyDecryptable(euint256.unwrap(value));\n        return value;\n    }\n\n    /**\n     * @dev Returns whether the the value is publicly decryptable.\n     */\n    function isPubliclyDecryptable(euint256 value) internal view returns (bool) {\n        return Impl.isPubliclyDecryptable(euint256.unwrap(value));\n    }\n\n    /**\n     * @dev Recovers the stored array of handles corresponding to requestID.\n     */\n    function loadRequestedHandles(uint256 requestID) internal view returns (bytes32[] memory) {\n        DecryptionRequests storage $ = Impl.getDecryptionRequests();\n        if ($.requestedHandles[requestID].length == 0) {\n            revert NoHandleFoundForRequestID();\n        }\n        return $.requestedHandles[requestID];\n    }\n\n    /**\n     * @dev     Calls the DecryptionOracle contract to request the decryption of a list of handles.\n     * @notice  Also does the needed call to ACL::allowForDecryption with requested handles.\n     */\n    function requestDecryption(\n        bytes32[] memory ctsHandles,\n        bytes4 callbackSelector\n    ) internal returns (uint256 requestID) {\n        requestID = requestDecryption(ctsHandles, callbackSelector, 0);\n    }\n\n    /**\n     * @dev     Calls the DecryptionOracle contract to request the decryption of a list of handles, with a custom msgValue.\n     * @notice  Also does the needed call to ACL::allowForDecryption with requested handles.\n     */\n    function requestDecryption(\n        bytes32[] memory ctsHandles,\n        bytes4 callbackSelector,\n        uint256 msgValue\n    ) internal returns (uint256 requestID) {\n        DecryptionRequests storage $ = Impl.getDecryptionRequests();\n        requestID = $.counterRequest;\n        CoprocessorConfig storage $$ = Impl.getCoprocessorConfig();\n        IACL($$.ACLAddress).allowForDecryption(ctsHandles);\n        IDecryptionOracle($$.DecryptionOracleAddress).requestDecryption{value: msgValue}(\n            requestID,\n            ctsHandles,\n            callbackSelector\n        );\n        saveRequestedHandles(requestID, ctsHandles);\n        $.counterRequest++;\n    }\n\n    /**\n     * @dev     MUST be called inside the callback function the dApp contract to verify the signatures,\n     * @dev     otherwise fake decryption results could be submitted.\n     * @notice  Warning: MUST be called directly in the callback function called by the relayer.\n     */\n    function checkSignatures(uint256 requestID, bytes memory cleartexts, bytes memory decryptionProof) internal {\n        bytes32[] memory handlesList = loadRequestedHandles(requestID);\n        bool isVerified = verifySignatures(handlesList, cleartexts, decryptionProof);\n        if (!isVerified) {\n            revert InvalidKMSSignatures();\n        }\n        emit DecryptionFulfilled(requestID);\n    }\n\n    /**\n     * @dev Private low-level function used to link in storage an array of handles to its associated requestID.\n     */\n    function saveRequestedHandles(uint256 requestID, bytes32[] memory handlesList) private {\n        DecryptionRequests storage $ = Impl.getDecryptionRequests();\n        if ($.requestedHandles[requestID].length != 0) {\n            revert HandlesAlreadySavedForRequestID();\n        }\n        $.requestedHandles[requestID] = handlesList;\n    }\n\n    /**\n     * @dev Private low-level function used to extract the decryptedResult bytes array and verify the KMS signatures.\n     * @notice  Warning: MUST be called directly in the callback function called by the relayer.\n     * @dev The callback function has the following signature:\n     * - requestID (static uint256)\n     * - cleartexts (dynamic bytes)\n     * - decryptionProof (dynamic bytes)\n     *\n     * This means that the calldata is encoded in the following way:\n     * - 4 bytes: selector\n     * - 32 bytes: requestID\n     * - 32 bytes: offset of the cleartexts\n     * - 32 bytes: offset of the decryptionProof\n     * - 32 bytes: length of the cleartexts (total number of bytes)\n     * - n*32 bytes: the \"n\" cleartext values, with \"n\" the number of handles\n     * - 32 bytes: length of the decryptionProof (total number of bytes)\n     * - ... the data of the decryptionProof (signatures, extra data)\n     */\n    function verifySignatures(\n        bytes32[] memory handlesList,\n        bytes memory cleartexts,\n        bytes memory decryptionProof\n    ) private returns (bool) {\n        // Compute the signature offset\n        // This offset is computed by considering the format encoded by the KMS when creating the\n        // \"decryptedResult\" bytes array (see comment below), which is the following:\n        // - requestID: 32 bytes\n        // - all \"n\" decrypted values (which is \"cleartexts\" itself): n*32 bytes (\"cleartexts.length\" bytes)\n        // - offset of the signatures: 32 bytes\n        // - the rest of signature values (lengths, offsets, values)\n        // This means the expected offset to concatenate to the \"decryptedResult\" bytes array has\n        // the following value: 32 + n*32 + 32\n        // See https://docs.soliditylang.org/en/latest/abi-spec.html#use-of-dynamic-types for more details.\n        // The signature offset will most likely be removed in the future,\n        // see https://github.com/zama-ai/fhevm-internal/issues/345\n        uint256 signaturesOffset = 32 + cleartexts.length + 32;\n\n        // Built the \"decryptedResult\" bytes array\n        // Currently, the \"decryptedResult\" is encoded (by the KMS) in the following format:\n        // - n*32 bytes: the \"n\" decrypted values, \"cleartexts\" itself\n        // - 32 bytes: offset of the signatures, as explained above\n        // This is equivalent to concatenating the cleartexts and the signatures offset, which can\n        // be done using abi.encoded in a gas efficient way.\n        // The signature offset will most likely be removed in the future,\n        // see https://github.com/zama-ai/fhevm-internal/issues/345\n        // Here we can use \"encodePacked\" instead of \"abi.encode\" to save gas, as the cleartexts\n        // and the signaturesOffset are already 32 bytes aligned (ie, no padding needed).\n        bytes memory decryptedResult = abi.encodePacked(cleartexts, signaturesOffset);\n\n        CoprocessorConfig storage $ = Impl.getCoprocessorConfig();\n        return\n            IKMSVerifier($.KMSVerifierAddress).verifyDecryptionEIP712KMSSignatures(\n                handlesList,\n                decryptedResult,\n                decryptionProof\n            );\n    }\n\n    /**\n     * @dev Converts handle from its custom type to the underlying bytes32. Used when requesting a decryption.\n     */\n    function toBytes32(ebool value) internal pure returns (bytes32 ct) {\n        ct = ebool.unwrap(value);\n    }\n\n    /**\n     * @dev Converts handle from its custom type to the underlying bytes32. Used when requesting a decryption.\n     */\n    function toBytes32(euint8 value) internal pure returns (bytes32 ct) {\n        ct = euint8.unwrap(value);\n    }\n\n    /**\n     * @dev Converts handle from its custom type to the underlying bytes32. Used when requesting a decryption.\n     */\n    function toBytes32(euint16 value) internal pure returns (bytes32 ct) {\n        ct = euint16.unwrap(value);\n    }\n\n    /**\n     * @dev Converts handle from its custom type to the underlying bytes32. Used when requesting a decryption.\n     */\n    function toBytes32(euint32 value) internal pure returns (bytes32 ct) {\n        ct = euint32.unwrap(value);\n    }\n\n    /**\n     * @dev Converts handle from its custom type to the underlying bytes32. Used when requesting a decryption.\n     */\n    function toBytes32(euint64 value) internal pure returns (bytes32 ct) {\n        ct = euint64.unwrap(value);\n    }\n\n    /**\n     * @dev Converts handle from its custom type to the underlying bytes32. Used when requesting a decryption.\n     */\n    function toBytes32(euint128 value) internal pure returns (bytes32 ct) {\n        ct = euint128.unwrap(value);\n    }\n\n    /**\n     * @dev Converts handle from its custom type to the underlying bytes32. Used when requesting a decryption.\n     */\n    function toBytes32(eaddress value) internal pure returns (bytes32 ct) {\n        ct = eaddress.unwrap(value);\n    }\n\n    /**\n     * @dev Converts handle from its custom type to the underlying bytes32. Used when requesting a decryption.\n     */\n    function toBytes32(euint256 value) internal pure returns (bytes32 ct) {\n        ct = euint256.unwrap(value);\n    }\n}\n"
    },
    "@fhevm/solidity/lib/FheType.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause-Clear\npragma solidity ^0.8.24;\n\nenum FheType {\n    Bool,\n    Uint4,\n    Uint8,\n    Uint16,\n    Uint32,\n    Uint64,\n    Uint128,\n    Uint160,\n    Uint256,\n    Uint512,\n    Uint1024,\n    Uint2048,\n    Uint2,\n    Uint6,\n    Uint10,\n    Uint12,\n    Uint14,\n    Int2,\n    Int4,\n    Int6,\n    Int8,\n    Int10,\n    Int12,\n    Int14,\n    Int16,\n    Int32,\n    Int64,\n    Int128,\n    Int160,\n    Int256,\n    AsciiString,\n    Int512,\n    Int1024,\n    Int2048,\n    Uint24,\n    Uint40,\n    Uint48,\n    Uint56,\n    Uint72,\n    Uint80,\n    Uint88,\n    Uint96,\n    Uint104,\n    Uint112,\n    Uint120,\n    Uint136,\n    Uint144,\n    Uint152,\n    Uint168,\n    Uint176,\n    Uint184,\n    Uint192,\n    Uint200,\n    Uint208,\n    Uint216,\n    Uint224,\n    Uint232,\n    Uint240,\n    Uint248,\n    Int24,\n    Int40,\n    Int48,\n    Int56,\n    Int72,\n    Int80,\n    Int88,\n    Int96,\n    Int104,\n    Int112,\n    Int120,\n    Int136,\n    Int144,\n    Int152,\n    Int168,\n    Int176,\n    Int184,\n    Int192,\n    Int200,\n    Int208,\n    Int216,\n    Int224,\n    Int232,\n    Int240,\n    Int248\n}\n"
    },
    "@fhevm/solidity/lib/Impl.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause-Clear\npragma solidity ^0.8.24;\n\nimport {FheType} from \"./FheType.sol\";\n\n/**\n * @title   CoprocessorConfig\n * @notice  This struct contains all addresses of core contracts, which are needed in a typical dApp.\n */\nstruct CoprocessorConfig {\n    address ACLAddress;\n    address CoprocessorAddress;\n    address DecryptionOracleAddress;\n    address KMSVerifierAddress;\n}\n\n/**\n * @title   DecryptionRequests\n * @notice  This struct contains the internal counter for requestIDs generated by the dapp,\n *          and the mapping from internal requestIDs to list of handles requested for decryption.\n */\nstruct DecryptionRequests {\n    uint256 counterRequest;\n    mapping(uint256 => bytes32[]) requestedHandles;\n}\n\n/**\n * @title   IFHEVMExecutor\n * @notice  This interface contains all functions to conduct FHE operations.\n */\ninterface IFHEVMExecutor {\n    /**\n     * @notice              Computes fheAdd operation.\n     * @param lhs           LHS.\n     * @param rhs           RHS.\n     * @param scalarByte    Scalar byte.\n     * @return result       Result.\n     */\n    function fheAdd(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\n\n    /**\n     * @notice              Computes fheSub operation.\n     * @param lhs           LHS.\n     * @param rhs           RHS.\n     * @param scalarByte    Scalar byte.\n     * @return result       Result.\n     */\n    function fheSub(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\n\n    /**\n     * @notice              Computes fheMul operation.\n     * @param lhs           LHS.\n     * @param rhs           RHS.\n     * @param scalarByte    Scalar byte.\n     * @return result       Result.\n     */\n    function fheMul(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\n\n    /**\n     * @notice              Computes fheDiv operation.\n     * @param lhs           LHS.\n     * @param rhs           RHS.\n     * @param scalarByte    Scalar byte.\n     * @return result       Result.\n     */\n    function fheDiv(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\n\n    /**\n     * @notice              Computes fheRem operation.\n     * @param lhs           LHS.\n     * @param rhs           RHS.\n     * @param scalarByte    Scalar byte.\n     * @return result       Result.\n     */\n    function fheRem(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\n\n    /**\n     * @notice              Computes fheBitAnd operation.\n     * @param lhs           LHS.\n     * @param rhs           RHS.\n     * @param scalarByte    Scalar byte.\n     * @return result       Result.\n     */\n    function fheBitAnd(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\n\n    /**\n     * @notice              Computes fheBitOr operation.\n     * @param lhs           LHS.\n     * @param rhs           RHS.\n     * @param scalarByte    Scalar byte.\n     * @return result       Result.\n     */\n    function fheBitOr(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\n\n    /**\n     * @notice              Computes fheBitXor operation.\n     * @param lhs           LHS.\n     * @param rhs           RHS.\n     * @param scalarByte    Scalar byte.\n     * @return result       Result.\n     */\n    function fheBitXor(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\n\n    /**\n     * @notice              Computes fheShl operation.\n     * @param lhs           LHS.\n     * @param rhs           RHS.\n     * @param scalarByte    Scalar byte.\n     * @return result       Result.\n     */\n    function fheShl(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\n\n    /**\n     * @notice              Computes fheShr operation.\n     * @param lhs           LHS.\n     * @param rhs           RHS.\n     * @param scalarByte    Scalar byte.\n     * @return result       Result.\n     */\n    function fheShr(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\n\n    /**\n     * @notice              Computes fheRotl operation.\n     * @param lhs           LHS.\n     * @param rhs           RHS.\n     * @param scalarByte    Scalar byte.\n     * @return result       Result.\n     */\n    function fheRotl(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\n\n    /**\n     * @notice              Computes fheRotr operation.\n     * @param lhs           LHS.\n     * @param rhs           RHS.\n     * @param scalarByte    Scalar byte.\n     * @return result       Result.\n     */\n    function fheRotr(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\n\n    /**\n     * @notice              Computes fheEq operation.\n     * @param lhs           LHS.\n     * @param rhs           RHS.\n     * @param scalarByte    Scalar byte.\n     * @return result       Result.\n     */\n    function fheEq(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\n\n    /**\n     * @notice              Computes fheNe operation.\n     * @param lhs           LHS.\n     * @param rhs           RHS.\n     * @param scalarByte    Scalar byte.\n     * @return result       Result.\n     */\n    function fheNe(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\n\n    /**\n     * @notice              Computes fheGe operation.\n     * @param lhs           LHS.\n     * @param rhs           RHS.\n     * @param scalarByte    Scalar byte.\n     * @return result       Result.\n     */\n    function fheGe(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\n\n    /**\n     * @notice              Computes fheGt operation.\n     * @param lhs           LHS.\n     * @param rhs           RHS.\n     * @param scalarByte    Scalar byte.\n     * @return result       Result.\n     */\n    function fheGt(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\n\n    /**\n     * @notice              Computes fheLe operation.\n     * @param lhs           LHS.\n     * @param rhs           RHS.\n     * @param scalarByte    Scalar byte.\n     * @return result       Result.\n     */\n    function fheLe(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\n\n    /**\n     * @notice              Computes fheLt operation.\n     * @param lhs           LHS.\n     * @param rhs           RHS.\n     * @param scalarByte    Scalar byte.\n     * @return result       Result.\n     */\n    function fheLt(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\n\n    /**\n     * @notice              Computes fheMin operation.\n     * @param lhs           LHS.\n     * @param rhs           RHS.\n     * @param scalarByte    Scalar byte.\n     * @return result       Result.\n     */\n    function fheMin(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\n\n    /**\n     * @notice              Computes fheMax operation.\n     * @param lhs           LHS.\n     * @param rhs           RHS.\n     * @param scalarByte    Scalar byte.\n     * @return result       Result.\n     */\n    function fheMax(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\n\n    /**\n     * @notice              Computes fheNeg operation.\n     * @param ct            Ct\n     * @return result       Result.\n     */\n    function fheNeg(bytes32 ct) external returns (bytes32 result);\n\n    /**\n     * @notice              Computes fheNot operation.\n     * @param ct            Ct\n     * @return result       Result.\n     */\n    function fheNot(bytes32 ct) external returns (bytes32 result);\n    /**\n     * @notice                Verifies the ciphertext.\n     * @param inputHandle     Input handle.\n     * @param callerAddress   Address of the caller.\n     * @param inputProof      Input proof.\n     * @param inputType       Input type.\n     * @return result         Result.\n     */\n    function verifyCiphertext(\n        bytes32 inputHandle,\n        address callerAddress,\n        bytes memory inputProof,\n        FheType inputType\n    ) external returns (bytes32 result);\n\n    /**\n     * @notice          Performs the casting to a target type.\n     * @param ct        Value to cast.\n     * @param toType    Target type.\n     * @return result   Result value of the target type.\n     */\n    function cast(bytes32 ct, FheType toType) external returns (bytes32 result);\n\n    /**\n     * @notice          Does trivial encryption.\n     * @param ct        Value to encrypt.\n     * @param toType    Target type.\n     * @return result   Result value of the target type.\n     */\n    function trivialEncrypt(uint256 ct, FheType toType) external returns (bytes32 result);\n\n    /**\n     * @notice              Computes FHEIfThenElse operation.\n     * @param control       Control value.\n     * @param ifTrue        If true.\n     * @param ifFalse       If false.\n     * @return result       Result.\n     */\n    function fheIfThenElse(bytes32 control, bytes32 ifTrue, bytes32 ifFalse) external returns (bytes32 result);\n\n    /**\n     * @notice              Computes FHERand operation.\n     * @param randType      Type for the random result.\n     * @return result       Result.\n     */\n    function fheRand(FheType randType) external returns (bytes32 result);\n\n    /**\n     * @notice              Computes FHERandBounded operation.\n     * @param upperBound    Upper bound value.\n     * @param randType      Type for the random result.\n     * @return result       Result.\n     */\n    function fheRandBounded(uint256 upperBound, FheType randType) external returns (bytes32 result);\n\n    /**\n     * @notice                      Returns the address of the InputVerifier contract used by the coprocessor.\n     * @return inputVerifierAddress Address of the InputVerifier.\n     */\n    function getInputVerifierAddress() external view returns (address);\n}\n\n/**\n * @title   IACL.\n * @notice  This interface contains all functions that are used to conduct operations\n *          with the ACL contract.\n */\ninterface IACL {\n    /**\n     * @notice              Allows the use of handle by address account for this transaction.\n     * @dev                 The caller must be allowed to use handle for allowTransient() to succeed.\n     *                      If not, allowTransient() reverts.\n     *                      The Coprocessor contract can always allowTransient(), contrarily to allow().\n     * @param ciphertext    Ciphertext.\n     * @param account       Address of the account.\n     */\n    function allowTransient(bytes32 ciphertext, address account) external;\n\n    /**\n     * @notice              Allows the use of handle for the address account.\n     * @dev                 The caller must be allowed to use handle for allow() to succeed. If not, allow() reverts.\n     * @param handle        Handle.\n     * @param account       Address of the account.\n     */\n    function allow(bytes32 handle, address account) external;\n\n    /**\n     * @dev This function removes the transient allowances, which could be useful for integration with\n     *      Account Abstraction when bundling several UserOps calling the FHEVMExecutor Coprocessor.\n     */\n    function cleanTransientStorage() external;\n\n    /**\n     * @notice              Returns whether the account is allowed to use the handle, either due to\n     *                      allowTransient() or allow().\n     * @param handle        Handle.\n     * @param account       Address of the account.\n     * @return isAllowed    Whether the account can access the handle.\n     */\n    function isAllowed(bytes32 handle, address account) external view returns (bool);\n\n    /**\n     * @notice              Allows a list of handles to be decrypted.\n     * @param handlesList   List of handles.\n     */\n    function allowForDecryption(bytes32[] memory handlesList) external;\n\n    /**\n     * @notice                  Returns wether a handle is allowed to be publicly decrypted.\n     * @param handle            Handle.\n     * @return isDecryptable    Whether the handle can be publicly decrypted.\n     */\n    function isAllowedForDecryption(bytes32 handle) external view returns (bool);\n}\n\n/**\n * @title IInputVerifier\n * @notice This interface contains the only function required from InputVerifier.\n */\ninterface IInputVerifier {\n    /**\n     * @dev This function removes the transient allowances, which could be useful for integration with\n     *      Account Abstraction when bundling several UserOps calling the FHEVMExecutor Coprocessor.\n     */\n    function cleanTransientStorage() external;\n}\n\n/**\n * @title   Impl\n * @notice  This library is the core implementation for computing FHE operations (e.g. add, sub, xor).\n */\nlibrary Impl {\n    /// keccak256(abi.encode(uint256(keccak256(\"confidential.storage.config\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant CoprocessorConfigLocation =\n        0x9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e4649700;\n\n    /// keccak256(abi.encode(uint256(keccak256(\"confidential.storage.decryptionRequests\")) - 1)) & ~bytes32(uint256(0xff));\n    bytes32 private constant DecryptionRequestsStorageLocation =\n        0x878245876662ba28a480c5ea71726db859fb50222b0a3d7cbbc21cfa336faf00;\n\n    /**\n     * @dev Returns the Coprocessor config.\n     */\n    function getCoprocessorConfig() internal pure returns (CoprocessorConfig storage $) {\n        assembly {\n            $.slot := CoprocessorConfigLocation\n        }\n    }\n\n    /**\n     * @dev Returns the DecryptionRequests storage struct.\n     */\n    function getDecryptionRequests() internal pure returns (DecryptionRequests storage $) {\n        assembly {\n            $.slot := DecryptionRequestsStorageLocation\n        }\n    }\n\n    /**\n     * @notice                  Sets the coprocessor addresses.\n     * @param coprocessorConfig Coprocessor config struct that contains contract addresses.\n     */\n    function setCoprocessor(CoprocessorConfig memory coprocessorConfig) internal {\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        $.ACLAddress = coprocessorConfig.ACLAddress;\n        $.CoprocessorAddress = coprocessorConfig.CoprocessorAddress;\n        $.DecryptionOracleAddress = coprocessorConfig.DecryptionOracleAddress;\n        $.KMSVerifierAddress = coprocessorConfig.KMSVerifierAddress;\n    }\n\n    function add(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\n        bytes1 scalarByte;\n        if (scalar) {\n            scalarByte = 0x01;\n        } else {\n            scalarByte = 0x00;\n        }\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        result = IFHEVMExecutor($.CoprocessorAddress).fheAdd(lhs, rhs, scalarByte);\n    }\n\n    function sub(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\n        bytes1 scalarByte;\n        if (scalar) {\n            scalarByte = 0x01;\n        } else {\n            scalarByte = 0x00;\n        }\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        result = IFHEVMExecutor($.CoprocessorAddress).fheSub(lhs, rhs, scalarByte);\n    }\n\n    function mul(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\n        bytes1 scalarByte;\n        if (scalar) {\n            scalarByte = 0x01;\n        } else {\n            scalarByte = 0x00;\n        }\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        result = IFHEVMExecutor($.CoprocessorAddress).fheMul(lhs, rhs, scalarByte);\n    }\n\n    function div(bytes32 lhs, bytes32 rhs) internal returns (bytes32 result) {\n        bytes1 scalarByte = 0x01;\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        result = IFHEVMExecutor($.CoprocessorAddress).fheDiv(lhs, rhs, scalarByte);\n    }\n\n    function rem(bytes32 lhs, bytes32 rhs) internal returns (bytes32 result) {\n        bytes1 scalarByte = 0x01;\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        result = IFHEVMExecutor($.CoprocessorAddress).fheRem(lhs, rhs, scalarByte);\n    }\n\n    function and(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\n        bytes1 scalarByte;\n        if (scalar) {\n            scalarByte = 0x01;\n        } else {\n            scalarByte = 0x00;\n        }\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        result = IFHEVMExecutor($.CoprocessorAddress).fheBitAnd(lhs, rhs, scalarByte);\n    }\n\n    function or(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\n        bytes1 scalarByte;\n        if (scalar) {\n            scalarByte = 0x01;\n        } else {\n            scalarByte = 0x00;\n        }\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        result = IFHEVMExecutor($.CoprocessorAddress).fheBitOr(lhs, rhs, scalarByte);\n    }\n\n    function xor(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\n        bytes1 scalarByte;\n        if (scalar) {\n            scalarByte = 0x01;\n        } else {\n            scalarByte = 0x00;\n        }\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        result = IFHEVMExecutor($.CoprocessorAddress).fheBitXor(lhs, rhs, scalarByte);\n    }\n\n    function shl(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\n        bytes1 scalarByte;\n        if (scalar) {\n            scalarByte = 0x01;\n        } else {\n            scalarByte = 0x00;\n        }\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        result = IFHEVMExecutor($.CoprocessorAddress).fheShl(lhs, rhs, scalarByte);\n    }\n\n    function shr(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\n        bytes1 scalarByte;\n        if (scalar) {\n            scalarByte = 0x01;\n        } else {\n            scalarByte = 0x00;\n        }\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        result = IFHEVMExecutor($.CoprocessorAddress).fheShr(lhs, rhs, scalarByte);\n    }\n\n    function rotl(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\n        bytes1 scalarByte;\n        if (scalar) {\n            scalarByte = 0x01;\n        } else {\n            scalarByte = 0x00;\n        }\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        result = IFHEVMExecutor($.CoprocessorAddress).fheRotl(lhs, rhs, scalarByte);\n    }\n\n    function rotr(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\n        bytes1 scalarByte;\n        if (scalar) {\n            scalarByte = 0x01;\n        } else {\n            scalarByte = 0x00;\n        }\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        result = IFHEVMExecutor($.CoprocessorAddress).fheRotr(lhs, rhs, scalarByte);\n    }\n\n    function eq(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\n        bytes1 scalarByte;\n        if (scalar) {\n            scalarByte = 0x01;\n        } else {\n            scalarByte = 0x00;\n        }\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        result = IFHEVMExecutor($.CoprocessorAddress).fheEq(lhs, rhs, scalarByte);\n    }\n\n    function ne(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\n        bytes1 scalarByte;\n        if (scalar) {\n            scalarByte = 0x01;\n        } else {\n            scalarByte = 0x00;\n        }\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        result = IFHEVMExecutor($.CoprocessorAddress).fheNe(lhs, rhs, scalarByte);\n    }\n\n    function ge(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\n        bytes1 scalarByte;\n        if (scalar) {\n            scalarByte = 0x01;\n        } else {\n            scalarByte = 0x00;\n        }\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        result = IFHEVMExecutor($.CoprocessorAddress).fheGe(lhs, rhs, scalarByte);\n    }\n\n    function gt(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\n        bytes1 scalarByte;\n        if (scalar) {\n            scalarByte = 0x01;\n        } else {\n            scalarByte = 0x00;\n        }\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        result = IFHEVMExecutor($.CoprocessorAddress).fheGt(lhs, rhs, scalarByte);\n    }\n\n    function le(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\n        bytes1 scalarByte;\n        if (scalar) {\n            scalarByte = 0x01;\n        } else {\n            scalarByte = 0x00;\n        }\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        result = IFHEVMExecutor($.CoprocessorAddress).fheLe(lhs, rhs, scalarByte);\n    }\n\n    function lt(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\n        bytes1 scalarByte;\n        if (scalar) {\n            scalarByte = 0x01;\n        } else {\n            scalarByte = 0x00;\n        }\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        result = IFHEVMExecutor($.CoprocessorAddress).fheLt(lhs, rhs, scalarByte);\n    }\n\n    function min(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\n        bytes1 scalarByte;\n        if (scalar) {\n            scalarByte = 0x01;\n        } else {\n            scalarByte = 0x00;\n        }\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        result = IFHEVMExecutor($.CoprocessorAddress).fheMin(lhs, rhs, scalarByte);\n    }\n\n    function max(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\n        bytes1 scalarByte;\n        if (scalar) {\n            scalarByte = 0x01;\n        } else {\n            scalarByte = 0x00;\n        }\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        result = IFHEVMExecutor($.CoprocessorAddress).fheMax(lhs, rhs, scalarByte);\n    }\n\n    function neg(bytes32 ct) internal returns (bytes32 result) {\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        result = IFHEVMExecutor($.CoprocessorAddress).fheNeg(ct);\n    }\n\n    function not(bytes32 ct) internal returns (bytes32 result) {\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        result = IFHEVMExecutor($.CoprocessorAddress).fheNot(ct);\n    }\n\n    /**\n     * @dev If 'control's value is 'true', the result has the same value as 'ifTrue'.\n     *      If 'control's value is 'false', the result has the same value as 'ifFalse'.\n     */\n    function select(bytes32 control, bytes32 ifTrue, bytes32 ifFalse) internal returns (bytes32 result) {\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        result = IFHEVMExecutor($.CoprocessorAddress).fheIfThenElse(control, ifTrue, ifFalse);\n    }\n\n    /**\n     * @notice              Verifies the ciphertext (FHEVMExecutor) and allows transient (ACL).\n     * @param inputHandle   Input handle.\n     * @param inputProof    Input proof.\n     * @param toType        Input type.\n     * @return result       Result.\n     */\n    function verify(bytes32 inputHandle, bytes memory inputProof, FheType toType) internal returns (bytes32 result) {\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        result = IFHEVMExecutor($.CoprocessorAddress).verifyCiphertext(inputHandle, msg.sender, inputProof, toType);\n        IACL($.ACLAddress).allowTransient(result, msg.sender);\n    }\n\n    /**\n     * @notice            Performs the casting to a target type.\n     * @param ciphertext  Ciphertext to cast.\n     * @param toType      Target type.\n     * @return result     Result value of the target type.\n     */\n    function cast(bytes32 ciphertext, FheType toType) internal returns (bytes32 result) {\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        result = IFHEVMExecutor($.CoprocessorAddress).cast(ciphertext, toType);\n    }\n\n    /**\n     * @notice          Does trivial encryption.\n     * @param value     Value to encrypt.\n     * @param toType    Target type.\n     * @return result   Result value of the target type.\n     */\n    function trivialEncrypt(uint256 value, FheType toType) internal returns (bytes32 result) {\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        result = IFHEVMExecutor($.CoprocessorAddress).trivialEncrypt(value, toType);\n    }\n\n    function rand(FheType randType) internal returns (bytes32 result) {\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        result = IFHEVMExecutor($.CoprocessorAddress).fheRand(randType);\n    }\n\n    function randBounded(uint256 upperBound, FheType randType) internal returns (bytes32 result) {\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        result = IFHEVMExecutor($.CoprocessorAddress).fheRandBounded(upperBound, randType);\n    }\n\n    /**\n     * @notice              Allows the use of handle by address account for this transaction.\n     * @dev                 The caller must be allowed to use handle for allowTransient() to succeed.\n     *                      If not, allowTransient() reverts.\n     *                      The Coprocessor contract can always allowTransient(), contrarily to allow().\n     * @param handle        Handle.\n     * @param account       Address of the account.\n     */\n    function allowTransient(bytes32 handle, address account) internal {\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        IACL($.ACLAddress).allowTransient(handle, account);\n    }\n\n    /**\n     * @notice              Allows the use of handle for the address account.\n     * @dev                 The caller must be allowed to use handle for allow() to succeed. If not, allow() reverts.\n     * @param handle        Handle.\n     * @param account       Address of the account.\n     */\n    function allow(bytes32 handle, address account) internal {\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        IACL($.ACLAddress).allow(handle, account);\n    }\n\n    /**\n     * @notice              Allows the handle to be publicly decryptable.\n     * @dev                 The caller must be allowed to use handle for makePubliclyDecryptable() to succeed.\n     *                      If not, makePubliclyDecryptable() reverts.\n     * @param handle        Handle.\n     */\n    function makePubliclyDecryptable(bytes32 handle) internal {\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        bytes32[] memory handleArray = new bytes32[](1);\n        handleArray[0] = handle;\n        IACL($.ACLAddress).allowForDecryption(handleArray);\n    }\n\n    /**\n     * @dev This function removes the transient allowances in the ACL, which could be useful for integration\n     *      with Account Abstraction when bundling several UserOps calling the FHEVMExecutor Coprocessor.\n     */\n    function cleanTransientStorageACL() internal {\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        IACL($.ACLAddress).cleanTransientStorage();\n    }\n\n    /**\n     * @dev This function removes the transient proofs in the InputVerifier, which could be useful for integration\n     *      with Account Abstraction when bundling several UserOps calling the FHEVMExecutor Coprocessor.\n     */\n    function cleanTransientStorageInputVerifier() internal {\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        address inputVerifierAddress = IFHEVMExecutor($.CoprocessorAddress).getInputVerifierAddress();\n        IInputVerifier(inputVerifierAddress).cleanTransientStorage();\n    }\n\n    /**\n     * @notice              Returns whether the account is allowed to use the handle, either due to\n     *                      allowTransient() or allow().\n     * @param handle        Handle.\n     * @param account       Address of the account.\n     * @return isAllowed    Whether the account can access the handle.\n     */\n    function isAllowed(bytes32 handle, address account) internal view returns (bool) {\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        return IACL($.ACLAddress).isAllowed(handle, account);\n    }\n\n    /**\n     * @notice              Returns whether the handle is allowed to be publicly decrypted.\n     * @param handle        Handle.\n     * @return isAllowed    Whether the handle can be publicly decrypted.\n     */\n    function isPubliclyDecryptable(bytes32 handle) internal view returns (bool) {\n        CoprocessorConfig storage $ = getCoprocessorConfig();\n        return IACL($.ACLAddress).isAllowedForDecryption(handle);\n    }\n}\n"
    },
    "@zama-fhe/oracle-solidity/address/ZamaOracleAddress.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause-Clear\n\npragma solidity ^0.8.24;\n\naddress constant SepoliaZamaOracleAddress = 0xa02Cda4Ca3a71D7C46997716F4283aa851C28812;\n"
    },
    "contracts/HelloFHEVM.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport {FHE, euint32, externalEuint32} from \"@fhevm/solidity/lib/FHE.sol\";\r\nimport {SepoliaConfig} from \"@fhevm/solidity/config/ZamaConfig.sol\";\r\n\r\n/// @title Hello FHEVM - Your First Encrypted Counter\r\n/// @author Zama Community Tutorial\r\n/// @notice A beginner-friendly example showing encrypted arithmetic operations on blockchain\r\n/// @dev This contract demonstrates basic FHEVM operations: encryption, computation, and decryption\r\ncontract HelloFHEVM is SepoliaConfig {\r\n    // Encrypted counter - stored on-chain but always encrypted!\r\n    euint32 private _counter;\r\n    \r\n    // Track the owner for decryption permissions\r\n    address public owner;\r\n    \r\n    // Events to track operations (values remain encrypted)\r\n    event CounterUpdated(address indexed user, string operation);\r\n    event CounterReset(address indexed user);\r\n    event PermissionGranted(address indexed user);\r\n    \r\n    /// @notice Initialize the contract with an encrypted zero counter\r\n    constructor() {\r\n        owner = msg.sender;\r\n        // Initialize counter to encrypted zero\r\n        _counter = FHE.asEuint32(0);\r\n        \r\n        // Grant permissions to the contract and owner\r\n        FHE.allowThis(_counter);\r\n        FHE.allow(_counter, owner);\r\n        \r\n        emit CounterUpdated(msg.sender, \"initialized\");\r\n    }\r\n    \r\n    /// @notice Get the encrypted counter value\r\n    /// @return The encrypted counter (only authorized users can decrypt)\r\n    /// @dev The returned value is encrypted - use FHEVM client to decrypt if authorized\r\n    function getCounter() external view returns (euint32) {\r\n        return _counter;\r\n    }\r\n    \r\n    /// @notice Add an encrypted value to the counter\r\n    /// @param encryptedValue The encrypted value to add (created by FHEVM client)\r\n    /// @param inputProof Cryptographic proof that the encrypted value is valid\r\n    /// @dev This function performs encrypted addition without revealing the operands or result\r\n    function add(externalEuint32 encryptedValue, bytes calldata inputProof) external {\r\n        // Convert external encrypted input to internal format\r\n        // This validates the proof and ensures the encrypted value is legitimate\r\n        euint32 value = FHE.fromExternal(encryptedValue, inputProof);\r\n        \r\n        // Perform encrypted addition - the magic of FHE!\r\n        // Neither the current counter value nor the input value is ever decrypted\r\n        _counter = FHE.add(_counter, value);\r\n        \r\n        // Grant permissions to decrypt the result\r\n        FHE.allowThis(_counter);\r\n        FHE.allow(_counter, owner);\r\n        FHE.allow(_counter, msg.sender); // Allow the user who performed the operation\r\n        \r\n        emit CounterUpdated(msg.sender, \"add\");\r\n    }\r\n    \r\n    /// @notice Subtract an encrypted value from the counter\r\n    /// @param encryptedValue The encrypted value to subtract\r\n    /// @param inputProof Proof that the encrypted value is valid\r\n    /// @dev Performs encrypted subtraction - result may underflow in encrypted space\r\n    function subtract(externalEuint32 encryptedValue, bytes calldata inputProof) external {\r\n        euint32 value = FHE.fromExternal(encryptedValue, inputProof);\r\n        \r\n        // Encrypted subtraction\r\n        _counter = FHE.sub(_counter, value);\r\n        \r\n        // Grant permissions\r\n        FHE.allowThis(_counter);\r\n        FHE.allow(_counter, owner);\r\n        FHE.allow(_counter, msg.sender);\r\n        \r\n        emit CounterUpdated(msg.sender, \"subtract\");\r\n    }\r\n    \r\n    /// @notice Multiply the counter by an encrypted value\r\n    /// @param encryptedValue The encrypted multiplier\r\n    /// @param inputProof Proof that the encrypted value is valid\r\n    /// @dev Demonstrates encrypted multiplication operations\r\n    function multiply(externalEuint32 encryptedValue, bytes calldata inputProof) external {\r\n        euint32 value = FHE.fromExternal(encryptedValue, inputProof);\r\n        \r\n        // Encrypted multiplication\r\n        _counter = FHE.mul(_counter, value);\r\n        \r\n        // Grant permissions\r\n        FHE.allowThis(_counter);\r\n        FHE.allow(_counter, owner);\r\n        FHE.allow(_counter, msg.sender);\r\n        \r\n        emit CounterUpdated(msg.sender, \"multiply\");\r\n    }\r\n    \r\n    /// @notice Reset counter to zero (only owner)\r\n    /// @dev Useful for demo purposes and testing\r\n    function reset() external {\r\n        require(msg.sender == owner, \"Only owner can reset\");\r\n        \r\n        _counter = FHE.asEuint32(0);\r\n        FHE.allowThis(_counter);\r\n        FHE.allow(_counter, owner);\r\n        \r\n        emit CounterReset(msg.sender);\r\n    }\r\n    \r\n    /// @notice Grant decryption permission to a specific address\r\n    /// @param user The address to grant permission to\r\n    /// @dev Only owner can grant permissions\r\n    function grantPermission(address user) external {\r\n        require(msg.sender == owner, \"Only owner can grant permissions\");\r\n        \r\n        FHE.allow(_counter, user);\r\n        \r\n        emit PermissionGranted(user);\r\n    }\r\n    \r\n    /// @notice Check if the counter is greater than an encrypted threshold\r\n    /// @param encryptedThreshold The encrypted threshold to compare against\r\n    /// @param inputProof Proof for the encrypted threshold\r\n    /// @return An encrypted boolean result (true if counter > threshold)\r\n    /// @dev Demonstrates encrypted comparison operations\r\n    function isGreaterThan(externalEuint32 encryptedThreshold, bytes calldata inputProof) \r\n        external \r\n        returns (euint32) \r\n    {\r\n        euint32 threshold = FHE.fromExternal(encryptedThreshold, inputProof);\r\n        \r\n        // Encrypted comparison - returns encrypted boolean (0 or 1)\r\n        euint32 result = FHE.asEuint32(FHE.gt(_counter, threshold));\r\n        \r\n        // Grant permissions for the result\r\n        FHE.allowThis(result);\r\n        FHE.allow(result, msg.sender);\r\n        \r\n        return result;\r\n    }\r\n    \r\n    /// @notice Get the minimum between counter and an encrypted value\r\n    /// @param encryptedValue The encrypted value to compare with\r\n    /// @param inputProof Proof for the encrypted value\r\n    /// @return The encrypted minimum value\r\n    /// @dev Shows conditional operations on encrypted data\r\n    function min(externalEuint32 encryptedValue, bytes calldata inputProof) \r\n        external \r\n        returns (euint32) \r\n    {\r\n        euint32 value = FHE.fromExternal(encryptedValue, inputProof);\r\n        \r\n        // Encrypted conditional selection\r\n        euint32 result = FHE.select(FHE.lt(_counter, value), _counter, value);\r\n        \r\n        // Grant permissions for the result\r\n        FHE.allowThis(result);\r\n        FHE.allow(result, msg.sender);\r\n        \r\n        return result;\r\n    }\r\n    \r\n    /// @notice Increment counter by 1 (convenience function)\r\n    /// @dev Uses a hardcoded encrypted value of 1\r\n    function increment() external {\r\n        euint32 one = FHE.asEuint32(1);\r\n        _counter = FHE.add(_counter, one);\r\n        \r\n        FHE.allowThis(_counter);\r\n        FHE.allow(_counter, owner);\r\n        FHE.allow(_counter, msg.sender);\r\n        \r\n        emit CounterUpdated(msg.sender, \"increment\");\r\n    }\r\n    \r\n    /// @notice Decrement counter by 1 (convenience function)\r\n    /// @dev Uses a hardcoded encrypted value of 1\r\n    function decrement() external {\r\n        euint32 one = FHE.asEuint32(1);\r\n        _counter = FHE.sub(_counter, one);\r\n        \r\n        FHE.allowThis(_counter);\r\n        FHE.allow(_counter, owner);\r\n        FHE.allow(_counter, msg.sender);\r\n        \r\n        emit CounterUpdated(msg.sender, \"decrement\");\r\n    }\r\n}\r\n"
    },
    "contracts/PrivateVoting.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport {FHE, euint32, externalEuint32, ebool, externalEbool} from \"@fhevm/solidity/lib/FHE.sol\";\r\nimport {SepoliaConfig} from \"@fhevm/solidity/config/ZamaConfig.sol\";\r\n\r\n/// @title Private Voting System\r\n/// @author Zama Community Tutorial\r\n/// @notice A confidential voting system where individual votes remain private until tallied\r\n/// @dev Demonstrates encrypted voting, access control, and time-based operations in FHEVM\r\ncontract PrivateVoting is SepoliaConfig {\r\n    // Voting proposal structure\r\n    struct Proposal {\r\n        string description;\r\n        euint32 yesVotes;\r\n        euint32 noVotes;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        bool exists;\r\n        bool resultsRevealed;\r\n    }\r\n    \r\n    // Encrypted vote structure\r\n    struct EncryptedVote {\r\n        euint32 proposalId;\r\n        ebool vote; // true for yes, false for no\r\n        bool hasVoted;\r\n    }\r\n    \r\n    // State variables\r\n    address public admin;\r\n    uint32 public proposalCount;\r\n    mapping(uint32 => Proposal) public proposals;\r\n    mapping(address => mapping(uint32 => bool)) public hasVoted;\r\n    mapping(address => bool) public authorizedVoters;\r\n    \r\n    // Events\r\n    event ProposalCreated(uint32 indexed proposalId, string description, uint256 startTime, uint256 endTime);\r\n    event VoteCast(address indexed voter, uint32 indexed proposalId);\r\n    event ResultsRevealed(uint32 indexed proposalId, uint32 yesVotes, uint32 noVotes);\r\n    event VoterAuthorized(address indexed voter);\r\n    event VoterRevoked(address indexed voter);\r\n    \r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"Only admin can perform this action\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyAuthorizedVoter() {\r\n        require(authorizedVoters[msg.sender], \"Not authorized to vote\");\r\n        _;\r\n    }\r\n    \r\n    modifier proposalExists(uint32 proposalId) {\r\n        require(proposals[proposalId].exists, \"Proposal does not exist\");\r\n        _;\r\n    }\r\n    \r\n    modifier votingOpen(uint32 proposalId) {\r\n        require(block.timestamp >= proposals[proposalId].startTime, \"Voting has not started\");\r\n        require(block.timestamp <= proposals[proposalId].endTime, \"Voting has ended\");\r\n        _;\r\n    }\r\n    \r\n    modifier votingClosed(uint32 proposalId) {\r\n        require(block.timestamp > proposals[proposalId].endTime, \"Voting is still open\");\r\n        _;\r\n    }\r\n    \r\n    modifier hasNotVoted(uint32 proposalId) {\r\n        require(!hasVoted[msg.sender][proposalId], \"Already voted on this proposal\");\r\n        _;\r\n    }\r\n    \r\n    /// @notice Initialize the voting contract\r\n    constructor() {\r\n        admin = msg.sender;\r\n        // Admin is automatically authorized to vote\r\n        authorizedVoters[admin] = true;\r\n    }\r\n    \r\n    /// @notice Create a new voting proposal\r\n    /// @param description The description of the proposal\r\n    /// @param durationInSeconds How long the voting should remain open\r\n    function createProposal(\r\n        string calldata description,\r\n        uint256 durationInSeconds\r\n    ) external onlyAdmin returns (uint32) {\r\n        require(durationInSeconds > 0, \"Duration must be positive\");\r\n        require(bytes(description).length > 0, \"Description cannot be empty\");\r\n        \r\n        uint32 proposalId = proposalCount++;\r\n        uint256 startTime = block.timestamp;\r\n        uint256 endTime = startTime + durationInSeconds;\r\n        \r\n        proposals[proposalId] = Proposal({\r\n            description: description,\r\n            yesVotes: FHE.asEuint32(0),\r\n            noVotes: FHE.asEuint32(0),\r\n            startTime: startTime,\r\n            endTime: endTime,\r\n            exists: true,\r\n            resultsRevealed: false\r\n        });\r\n        \r\n        // Grant permissions for encrypted vote counting\r\n        FHE.allowThis(proposals[proposalId].yesVotes);\r\n        FHE.allowThis(proposals[proposalId].noVotes);\r\n        FHE.allow(proposals[proposalId].yesVotes, admin);\r\n        FHE.allow(proposals[proposalId].noVotes, admin);\r\n        \r\n        emit ProposalCreated(proposalId, description, startTime, endTime);\r\n        return proposalId;\r\n    }\r\n    \r\n    /// @notice Cast an encrypted vote on a proposal\r\n    /// @param proposalId The ID of the proposal to vote on\r\n    /// @param encryptedVote The encrypted vote (true for yes, false for no)\r\n    /// @param voteProof Cryptographic proof for the encrypted vote\r\n    function castVote(\r\n        uint32 proposalId,\r\n        externalEbool encryptedVote,\r\n        bytes calldata voteProof\r\n    ) external \r\n        onlyAuthorizedVoter\r\n        proposalExists(proposalId)\r\n        votingOpen(proposalId)\r\n        hasNotVoted(proposalId)\r\n    {\r\n        // Convert external encrypted vote to internal format\r\n        ebool vote = FHE.fromExternal(encryptedVote, voteProof);\r\n        \r\n        // Create encrypted one for vote counting\r\n        euint32 one = FHE.asEuint32(1);\r\n        \r\n        // Add encrypted vote to appropriate counter\r\n        // If vote is true (yes), add to yesVotes, otherwise add to noVotes\r\n        proposals[proposalId].yesVotes = FHE.add(\r\n            proposals[proposalId].yesVotes,\r\n            FHE.select(vote, one, FHE.asEuint32(0))\r\n        );\r\n        \r\n        proposals[proposalId].noVotes = FHE.add(\r\n            proposals[proposalId].noVotes,\r\n            FHE.select(vote, FHE.asEuint32(0), one)\r\n        );\r\n        \r\n        // Update permissions\r\n        FHE.allowThis(proposals[proposalId].yesVotes);\r\n        FHE.allowThis(proposals[proposalId].noVotes);\r\n        FHE.allow(proposals[proposalId].yesVotes, admin);\r\n        FHE.allow(proposals[proposalId].noVotes, admin);\r\n        \r\n        // Mark voter as having voted\r\n        hasVoted[msg.sender][proposalId] = true;\r\n        \r\n        emit VoteCast(msg.sender, proposalId);\r\n    }\r\n    \r\n    /// @notice Get encrypted vote counts (only admin can decrypt)\r\n    /// @param proposalId The ID of the proposal\r\n    /// @return yesVotes Encrypted count of yes votes\r\n    /// @return noVotes Encrypted count of no votes\r\n    function getVoteCounts(uint32 proposalId) \r\n        external \r\n        view \r\n        proposalExists(proposalId)\r\n        returns (euint32 yesVotes, euint32 noVotes) \r\n    {\r\n        return (proposals[proposalId].yesVotes, proposals[proposalId].noVotes);\r\n    }\r\n    \r\n    /// @notice Reveal voting results (only admin, only after voting ends)\r\n    /// @param proposalId The ID of the proposal\r\n    /// @dev This function would typically decrypt the results using FHEVM client\r\n    function markResultsRevealed(uint32 proposalId) \r\n        external \r\n        onlyAdmin\r\n        proposalExists(proposalId)\r\n        votingClosed(proposalId)\r\n    {\r\n        proposals[proposalId].resultsRevealed = true;\r\n        \r\n        // In a real implementation, you would decrypt the votes here\r\n        // For demonstration, we emit an event with placeholder values\r\n        emit ResultsRevealed(proposalId, 0, 0); // Actual values would be decrypted\r\n    }\r\n    \r\n    /// @notice Authorize a voter\r\n    /// @param voter The address to authorize\r\n    function authorizeVoter(address voter) external onlyAdmin {\r\n        require(voter != address(0), \"Invalid voter address\");\r\n        authorizedVoters[voter] = true;\r\n        emit VoterAuthorized(voter);\r\n    }\r\n    \r\n    /// @notice Revoke voter authorization\r\n    /// @param voter The address to revoke\r\n    function revokeVoter(address voter) external onlyAdmin {\r\n        require(voter != admin, \"Cannot revoke admin\");\r\n        authorizedVoters[voter] = false;\r\n        emit VoterRevoked(voter);\r\n    }\r\n    \r\n    /// @notice Batch authorize multiple voters\r\n    /// @param voters Array of addresses to authorize\r\n    function batchAuthorizeVoters(address[] calldata voters) external onlyAdmin {\r\n        for (uint256 i = 0; i < voters.length; i++) {\r\n            require(voters[i] != address(0), \"Invalid voter address\");\r\n            authorizedVoters[voters[i]] = true;\r\n            emit VoterAuthorized(voters[i]);\r\n        }\r\n    }\r\n    \r\n    /// @notice Check if voting is currently open for a proposal\r\n    /// @param proposalId The ID of the proposal\r\n    /// @return isOpen True if voting is currently open\r\n    function isVotingOpen(uint32 proposalId) \r\n        external \r\n        view \r\n        proposalExists(proposalId)\r\n        returns (bool isOpen) \r\n    {\r\n        return block.timestamp >= proposals[proposalId].startTime && \r\n               block.timestamp <= proposals[proposalId].endTime;\r\n    }\r\n    \r\n    /// @notice Get proposal details\r\n    /// @param proposalId The ID of the proposal\r\n    /// @return description The proposal description\r\n    /// @return startTime When voting starts\r\n    /// @return endTime When voting ends\r\n    /// @return resultsRevealed Whether results have been revealed\r\n    function getProposal(uint32 proposalId) \r\n        external \r\n        view \r\n        proposalExists(proposalId)\r\n        returns (\r\n            string memory description,\r\n            uint256 startTime,\r\n            uint256 endTime,\r\n            bool resultsRevealed\r\n        ) \r\n    {\r\n        Proposal storage proposal = proposals[proposalId];\r\n        return (\r\n            proposal.description,\r\n            proposal.startTime,\r\n            proposal.endTime,\r\n            proposal.resultsRevealed\r\n        );\r\n    }\r\n    \r\n    /// @notice Get total number of proposals\r\n    /// @return count The total number of proposals created\r\n    function getProposalCount() external view returns (uint32 count) {\r\n        return proposalCount;\r\n    }\r\n    \r\n    /// @notice Check if an address is authorized to vote\r\n    /// @param voter The address to check\r\n    /// @return authorized True if the address is authorized\r\n    function isAuthorizedVoter(address voter) external view returns (bool authorized) {\r\n        return authorizedVoters[voter];\r\n    }\r\n    \r\n    /// @notice Emergency function to extend voting period\r\n    /// @param proposalId The ID of the proposal\r\n    /// @param additionalSeconds Additional seconds to extend voting\r\n    function extendVoting(uint32 proposalId, uint256 additionalSeconds) \r\n        external \r\n        onlyAdmin\r\n        proposalExists(proposalId)\r\n    {\r\n        require(block.timestamp <= proposals[proposalId].endTime, \"Voting already ended\");\r\n        require(additionalSeconds > 0, \"Extension must be positive\");\r\n        \r\n        proposals[proposalId].endTime += additionalSeconds;\r\n    }\r\n}\r\n"
    },
    "contracts/SecretAuction.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport {FHE, euint32, externalEuint32, ebool} from \"@fhevm/solidity/lib/FHE.sol\";\r\nimport {SepoliaConfig} from \"@fhevm/solidity/config/ZamaConfig.sol\";\r\n\r\n/// @title Secret Auction House\r\n/// @author Zama Community Tutorial  \r\n/// @notice A sealed-bid auction system where bids remain private until the auction ends\r\n/// @dev Demonstrates advanced FHEVM operations: encrypted comparisons, conditional logic, and complex state management\r\ncontract SecretAuction is SepoliaConfig {\r\n    // Auction item structure\r\n    struct AuctionItem {\r\n        string title;\r\n        string description;\r\n        address seller;\r\n        euint32 reservePrice; // Encrypted minimum acceptable bid\r\n        euint32 highestBid;   // Encrypted highest bid\r\n        address highestBidder;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        bool exists;\r\n        bool finalized;\r\n        bool cancelled;\r\n    }\r\n    \r\n    // Bidder information\r\n    struct BidderInfo {\r\n        euint32 bidAmount;\r\n        bool hasBid;\r\n        bool refunded;\r\n    }\r\n    \r\n    // State variables\r\n    address public auctionHouse;\r\n    uint32 public auctionCount;\r\n    uint256 public platformFeePercent = 250; // 2.5% in basis points\r\n    \r\n    mapping(uint32 => AuctionItem) public auctions;\r\n    mapping(uint32 => mapping(address => BidderInfo)) public bidders;\r\n    mapping(uint32 => address[]) public auctionBidders;\r\n    mapping(address => uint256) public balances; // For refunds and payments\r\n    \r\n    // Events\r\n    event AuctionCreated(\r\n        uint32 indexed auctionId, \r\n        string title, \r\n        address indexed seller, \r\n        uint256 startTime, \r\n        uint256 endTime\r\n    );\r\n    event BidPlaced(uint32 indexed auctionId, address indexed bidder);\r\n    event AuctionFinalized(\r\n        uint32 indexed auctionId, \r\n        address indexed winner, \r\n        uint256 winningAmount\r\n    );\r\n    event AuctionCancelled(uint32 indexed auctionId);\r\n    event RefundProcessed(uint32 indexed auctionId, address indexed bidder, uint256 amount);\r\n    event PaymentProcessed(uint32 indexed auctionId, address indexed seller, uint256 amount);\r\n    \r\n    modifier onlyAuctionHouse() {\r\n        require(msg.sender == auctionHouse, \"Only auction house can perform this action\");\r\n        _;\r\n    }\r\n    \r\n    modifier auctionExists(uint32 auctionId) {\r\n        require(auctions[auctionId].exists, \"Auction does not exist\");\r\n        _;\r\n    }\r\n    \r\n    modifier auctionActive(uint32 auctionId) {\r\n        require(block.timestamp >= auctions[auctionId].startTime, \"Auction has not started\");\r\n        require(block.timestamp <= auctions[auctionId].endTime, \"Auction has ended\");\r\n        require(!auctions[auctionId].cancelled, \"Auction is cancelled\");\r\n        _;\r\n    }\r\n    \r\n    modifier auctionEnded(uint32 auctionId) {\r\n        require(block.timestamp > auctions[auctionId].endTime, \"Auction is still active\");\r\n        require(!auctions[auctionId].cancelled, \"Auction is cancelled\");\r\n        _;\r\n    }\r\n    \r\n    modifier notFinalized(uint32 auctionId) {\r\n        require(!auctions[auctionId].finalized, \"Auction already finalized\");\r\n        _;\r\n    }\r\n    \r\n    /// @notice Initialize the auction house\r\n    constructor() {\r\n        auctionHouse = msg.sender;\r\n    }\r\n    \r\n    /// @notice Create a new auction\r\n    /// @param title The title of the auction item\r\n    /// @param description Description of the item\r\n    /// @param encryptedReservePrice Encrypted minimum acceptable bid\r\n    /// @param reserveProof Cryptographic proof for the reserve price\r\n    /// @param durationInSeconds How long the auction should run\r\n    function createAuction(\r\n        string calldata title,\r\n        string calldata description,\r\n        externalEuint32 encryptedReservePrice,\r\n        bytes calldata reserveProof,\r\n        uint256 durationInSeconds\r\n    ) external returns (uint32) {\r\n        require(bytes(title).length > 0, \"Title cannot be empty\");\r\n        require(durationInSeconds > 0, \"Duration must be positive\");\r\n        require(durationInSeconds <= 7 days, \"Duration cannot exceed 7 days\");\r\n        \r\n        uint32 auctionId = auctionCount++;\r\n        uint256 startTime = block.timestamp;\r\n        uint256 endTime = startTime + durationInSeconds;\r\n        \r\n        // Convert external encrypted reserve price to internal format\r\n        euint32 reservePrice = FHE.fromExternal(encryptedReservePrice, reserveProof);\r\n        \r\n        auctions[auctionId] = AuctionItem({\r\n            title: title,\r\n            description: description,\r\n            seller: msg.sender,\r\n            reservePrice: reservePrice,\r\n            highestBid: FHE.asEuint32(0),\r\n            highestBidder: address(0),\r\n            startTime: startTime,\r\n            endTime: endTime,\r\n            exists: true,\r\n            finalized: false,\r\n            cancelled: false\r\n        });\r\n        \r\n        // Set up permissions for encrypted values\r\n        FHE.allowThis(auctions[auctionId].reservePrice);\r\n        FHE.allowThis(auctions[auctionId].highestBid);\r\n        FHE.allow(auctions[auctionId].reservePrice, msg.sender);\r\n        FHE.allow(auctions[auctionId].highestBid, msg.sender);\r\n        FHE.allow(auctions[auctionId].reservePrice, auctionHouse);\r\n        FHE.allow(auctions[auctionId].highestBid, auctionHouse);\r\n        \r\n        emit AuctionCreated(auctionId, title, msg.sender, startTime, endTime);\r\n        return auctionId;\r\n    }\r\n    \r\n    /// @notice Place an encrypted bid on an auction\r\n    /// @param auctionId The ID of the auction\r\n    /// @param encryptedBid The encrypted bid amount\r\n    /// @param bidProof Cryptographic proof for the bid\r\n    function placeBid(\r\n        uint32 auctionId,\r\n        externalEuint32 encryptedBid,\r\n        bytes calldata bidProof\r\n    ) external payable \r\n        auctionExists(auctionId)\r\n        auctionActive(auctionId)\r\n    {\r\n        require(msg.sender != auctions[auctionId].seller, \"Seller cannot bid on own auction\");\r\n        require(msg.value > 0, \"Must send ETH with bid\");\r\n        \r\n        // Convert external encrypted bid to internal format\r\n        euint32 bidAmount = FHE.fromExternal(encryptedBid, bidProof);\r\n        \r\n        // Store bidder information\r\n        if (!bidders[auctionId][msg.sender].hasBid) {\r\n            auctionBidders[auctionId].push(msg.sender);\r\n        }\r\n        \r\n        bidders[auctionId][msg.sender] = BidderInfo({\r\n            bidAmount: bidAmount,\r\n            hasBid: true,\r\n            refunded: false\r\n        });\r\n        \r\n        // Update highest bid using encrypted comparison\r\n        ebool isHigher = FHE.gt(bidAmount, auctions[auctionId].highestBid);\r\n        \r\n        // Conditionally update highest bid and bidder\r\n        auctions[auctionId].highestBid = FHE.select(\r\n            isHigher, \r\n            bidAmount, \r\n            auctions[auctionId].highestBid\r\n        );\r\n        \r\n        // Update highest bidder conditionally\r\n        // Note: In a production system, this could be done off-chain to maintain more privacy\r\n        auctions[auctionId].highestBidder = msg.sender; // Simplified for demo\r\n        \r\n        // Set permissions for the new bid\r\n        FHE.allowThis(bidders[auctionId][msg.sender].bidAmount);\r\n        FHE.allow(bidders[auctionId][msg.sender].bidAmount, msg.sender);\r\n        FHE.allow(bidders[auctionId][msg.sender].bidAmount, auctionHouse);\r\n        FHE.allowThis(auctions[auctionId].highestBid);\r\n        \r\n        // Store the ETH sent with the bid\r\n        balances[msg.sender] += msg.value;\r\n        \r\n        emit BidPlaced(auctionId, msg.sender);\r\n    }\r\n    \r\n    /// @notice Finalize the auction and determine the winner\r\n    /// @param auctionId The ID of the auction to finalize\r\n    /// @dev This function requires decryption of the winning bid amount\r\n    function finalizeAuction(uint32 auctionId) \r\n        external \r\n        auctionExists(auctionId)\r\n        auctionEnded(auctionId)\r\n        notFinalized(auctionId)\r\n    {\r\n        require(\r\n            msg.sender == auctions[auctionId].seller || msg.sender == auctionHouse,\r\n            \"Only seller or auction house can finalize\"\r\n        );\r\n        \r\n        auctions[auctionId].finalized = true;\r\n        \r\n        // Check if there's a winner and if reserve price is met\r\n        address winner = auctions[auctionId].highestBidder;\r\n        \r\n        if (winner != address(0)) {\r\n            // In a real implementation, you would decrypt the winning bid here\r\n            // For demonstration, we'll use a placeholder amount\r\n            uint256 winningAmount = 0; // This would be the decrypted winning bid\r\n            \r\n            // Check if reserve price is met (would require decryption)\r\n            // bool reserveMet = decryptedHighestBid >= decryptedReservePrice;\r\n            \r\n            // For demo purposes, assume reserve is met\r\n            bool reserveMet = true;\r\n            \r\n            if (reserveMet) {\r\n                // Process payment to seller (minus platform fee)\r\n                uint256 platformFee = (winningAmount * platformFeePercent) / 10000;\r\n                uint256 sellerPayment = winningAmount - platformFee;\r\n                \r\n                balances[auctions[auctionId].seller] += sellerPayment;\r\n                balances[auctionHouse] += platformFee;\r\n                \r\n                // Deduct winning bid from winner's balance\r\n                balances[winner] -= winningAmount;\r\n                \r\n                emit PaymentProcessed(auctionId, auctions[auctionId].seller, sellerPayment);\r\n                emit AuctionFinalized(auctionId, winner, winningAmount);\r\n            } else {\r\n                // Reserve not met, refund all bidders\r\n                _refundAllBidders(auctionId);\r\n                emit AuctionFinalized(auctionId, address(0), 0);\r\n            }\r\n        } else {\r\n            // No bids, nothing to do\r\n            emit AuctionFinalized(auctionId, address(0), 0);\r\n        }\r\n        \r\n        // Process refunds for losing bidders\r\n        _processRefunds(auctionId, winner);\r\n    }\r\n    \r\n    /// @notice Cancel an auction (only before it ends)\r\n    /// @param auctionId The ID of the auction to cancel\r\n    function cancelAuction(uint32 auctionId) \r\n        external \r\n        auctionExists(auctionId)\r\n        notFinalized(auctionId)\r\n    {\r\n        require(\r\n            msg.sender == auctions[auctionId].seller || msg.sender == auctionHouse,\r\n            \"Only seller or auction house can cancel\"\r\n        );\r\n        require(block.timestamp <= auctions[auctionId].endTime, \"Cannot cancel after auction ends\");\r\n        \r\n        auctions[auctionId].cancelled = true;\r\n        auctions[auctionId].finalized = true;\r\n        \r\n        // Refund all bidders\r\n        _refundAllBidders(auctionId);\r\n        \r\n        emit AuctionCancelled(auctionId);\r\n    }\r\n    \r\n    /// @notice Withdraw available balance\r\n    function withdraw() external {\r\n        uint256 amount = balances[msg.sender];\r\n        require(amount > 0, \"No balance to withdraw\");\r\n        \r\n        balances[msg.sender] = 0;\r\n        (bool success, ) = payable(msg.sender).call{value: amount}(\"\");\r\n        require(success, \"Withdrawal failed\");\r\n    }\r\n    \r\n    /// @notice Get auction details\r\n    /// @param auctionId The ID of the auction\r\n    /// @return title The auction title\r\n    /// @return description The auction description\r\n    /// @return seller The seller's address\r\n    /// @return startTime When the auction starts\r\n    /// @return endTime When the auction ends\r\n    /// @return finalized Whether the auction is finalized\r\n    /// @return cancelled Whether the auction is cancelled\r\n    function getAuction(uint32 auctionId) \r\n        external \r\n        view \r\n        auctionExists(auctionId)\r\n        returns (\r\n            string memory title,\r\n            string memory description,\r\n            address seller,\r\n            uint256 startTime,\r\n            uint256 endTime,\r\n            bool finalized,\r\n            bool cancelled\r\n        ) \r\n    {\r\n        AuctionItem storage auction = auctions[auctionId];\r\n        return (\r\n            auction.title,\r\n            auction.description,\r\n            auction.seller,\r\n            auction.startTime,\r\n            auction.endTime,\r\n            auction.finalized,\r\n            auction.cancelled\r\n        );\r\n    }\r\n    \r\n    /// @notice Get encrypted bid information (only bidder can decrypt their own bid)\r\n    /// @param auctionId The ID of the auction\r\n    /// @param bidder The bidder's address\r\n    /// @return bidAmount The encrypted bid amount\r\n    /// @return hasBid Whether the address has placed a bid\r\n    function getBidInfo(uint32 auctionId, address bidder) \r\n        external \r\n        view \r\n        returns (euint32 bidAmount, bool hasBid) \r\n    {\r\n        BidderInfo storage info = bidders[auctionId][bidder];\r\n        return (info.bidAmount, info.hasBid);\r\n    }\r\n    \r\n    /// @notice Get current highest bid (encrypted)\r\n    /// @param auctionId The ID of the auction\r\n    /// @return highestBid The encrypted highest bid\r\n    /// @return highestBidder The address of the current highest bidder\r\n    function getHighestBid(uint32 auctionId) \r\n        external \r\n        view \r\n        auctionExists(auctionId)\r\n        returns (euint32 highestBid, address highestBidder) \r\n    {\r\n        return (auctions[auctionId].highestBid, auctions[auctionId].highestBidder);\r\n    }\r\n    \r\n    /// @notice Check if auction is currently active\r\n    /// @param auctionId The ID of the auction\r\n    /// @return active True if auction is currently accepting bids\r\n    function isAuctionActive(uint32 auctionId) \r\n        external \r\n        view \r\n        auctionExists(auctionId)\r\n        returns (bool active) \r\n    {\r\n        return block.timestamp >= auctions[auctionId].startTime && \r\n               block.timestamp <= auctions[auctionId].endTime &&\r\n               !auctions[auctionId].cancelled;\r\n    }\r\n    \r\n    /// @notice Get total number of auctions\r\n    /// @return count The total number of auctions created\r\n    function getAuctionCount() external view returns (uint32 count) {\r\n        return auctionCount;\r\n    }\r\n    \r\n    /// @notice Set platform fee percentage (only auction house)\r\n    /// @param newFeePercent New fee percentage in basis points (e.g., 250 = 2.5%)\r\n    function setPlatformFee(uint256 newFeePercent) external onlyAuctionHouse {\r\n        require(newFeePercent <= 1000, \"Fee cannot exceed 10%\"); // Max 10%\r\n        platformFeePercent = newFeePercent;\r\n    }\r\n    \r\n    /// @notice Internal function to process refunds for losing bidders\r\n    /// @param auctionId The ID of the auction\r\n    /// @param winner The winning bidder (excluded from refunds)\r\n    function _processRefunds(uint32 auctionId, address winner) internal {\r\n        address[] storage bidderList = auctionBidders[auctionId];\r\n        \r\n        for (uint256 i = 0; i < bidderList.length; i++) {\r\n            address bidder = bidderList[i];\r\n            if (bidder != winner && !bidders[auctionId][bidder].refunded) {\r\n                bidders[auctionId][bidder].refunded = true;\r\n                // Balance already stored when bid was placed\r\n                emit RefundProcessed(auctionId, bidder, balances[bidder]);\r\n            }\r\n        }\r\n    }\r\n    \r\n    /// @notice Internal function to refund all bidders (used for cancelled auctions)\r\n    /// @param auctionId The ID of the auction\r\n    function _refundAllBidders(uint32 auctionId) internal {\r\n        address[] storage bidderList = auctionBidders[auctionId];\r\n        \r\n        for (uint256 i = 0; i < bidderList.length; i++) {\r\n            address bidder = bidderList[i];\r\n            if (!bidders[auctionId][bidder].refunded) {\r\n                bidders[auctionId][bidder].refunded = true;\r\n                // Balance already stored when bid was placed\r\n                emit RefundProcessed(auctionId, bidder, balances[bidder]);\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "encrypted-types/EncryptedTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\ntype ebool is bytes32;\n\ntype euint8 is bytes32;\ntype euint16 is bytes32;\ntype euint24 is bytes32;\ntype euint32 is bytes32;\ntype euint40 is bytes32;\ntype euint48 is bytes32;\ntype euint56 is bytes32;\ntype euint64 is bytes32;\ntype euint72 is bytes32;\ntype euint80 is bytes32;\ntype euint88 is bytes32;\ntype euint96 is bytes32;\ntype euint104 is bytes32;\ntype euint112 is bytes32;\ntype euint120 is bytes32;\ntype euint128 is bytes32;\ntype euint136 is bytes32;\ntype euint144 is bytes32;\ntype euint152 is bytes32;\ntype euint160 is bytes32;\ntype euint168 is bytes32;\ntype euint176 is bytes32;\ntype euint184 is bytes32;\ntype euint192 is bytes32;\ntype euint200 is bytes32;\ntype euint208 is bytes32;\ntype euint216 is bytes32;\ntype euint224 is bytes32;\ntype euint232 is bytes32;\ntype euint240 is bytes32;\ntype euint248 is bytes32;\ntype euint256 is bytes32;\n\ntype eint8 is bytes32;\ntype eint16 is bytes32;\ntype eint24 is bytes32;\ntype eint32 is bytes32;\ntype eint40 is bytes32;\ntype eint48 is bytes32;\ntype eint56 is bytes32;\ntype eint64 is bytes32;\ntype eint72 is bytes32;\ntype eint80 is bytes32;\ntype eint88 is bytes32;\ntype eint96 is bytes32;\ntype eint104 is bytes32;\ntype eint112 is bytes32;\ntype eint120 is bytes32;\ntype eint128 is bytes32;\ntype eint136 is bytes32;\ntype eint144 is bytes32;\ntype eint152 is bytes32;\ntype eint160 is bytes32;\ntype eint168 is bytes32;\ntype eint176 is bytes32;\ntype eint184 is bytes32;\ntype eint192 is bytes32;\ntype eint200 is bytes32;\ntype eint208 is bytes32;\ntype eint216 is bytes32;\ntype eint224 is bytes32;\ntype eint232 is bytes32;\ntype eint240 is bytes32;\ntype eint248 is bytes32;\ntype eint256 is bytes32;\n\ntype eaddress is bytes32;\n\ntype ebytes1 is bytes32;\ntype ebytes2 is bytes32;\ntype ebytes3 is bytes32;\ntype ebytes4 is bytes32;\ntype ebytes5 is bytes32;\ntype ebytes6 is bytes32;\ntype ebytes7 is bytes32;\ntype ebytes8 is bytes32;\ntype ebytes9 is bytes32;\ntype ebytes10 is bytes32;\ntype ebytes11 is bytes32;\ntype ebytes12 is bytes32;\ntype ebytes13 is bytes32;\ntype ebytes14 is bytes32;\ntype ebytes15 is bytes32;\ntype ebytes16 is bytes32;\ntype ebytes17 is bytes32;\ntype ebytes18 is bytes32;\ntype ebytes19 is bytes32;\ntype ebytes20 is bytes32;\ntype ebytes21 is bytes32;\ntype ebytes22 is bytes32;\ntype ebytes23 is bytes32;\ntype ebytes24 is bytes32;\ntype ebytes25 is bytes32;\ntype ebytes26 is bytes32;\ntype ebytes27 is bytes32;\ntype ebytes28 is bytes32;\ntype ebytes29 is bytes32;\ntype ebytes30 is bytes32;\ntype ebytes31 is bytes32;\ntype ebytes32 is bytes32;\n\ntype externalEbool is bytes32;\n\ntype externalEuint8 is bytes32;\ntype externalEuint16 is bytes32;\ntype externalEuint24 is bytes32;\ntype externalEuint32 is bytes32;\ntype externalEuint40 is bytes32;\ntype externalEuint48 is bytes32;\ntype externalEuint56 is bytes32;\ntype externalEuint64 is bytes32;\ntype externalEuint72 is bytes32;\ntype externalEuint80 is bytes32;\ntype externalEuint88 is bytes32;\ntype externalEuint96 is bytes32;\ntype externalEuint104 is bytes32;\ntype externalEuint112 is bytes32;\ntype externalEuint120 is bytes32;\ntype externalEuint128 is bytes32;\ntype externalEuint136 is bytes32;\ntype externalEuint144 is bytes32;\ntype externalEuint152 is bytes32;\ntype externalEuint160 is bytes32;\ntype externalEuint168 is bytes32;\ntype externalEuint176 is bytes32;\ntype externalEuint184 is bytes32;\ntype externalEuint192 is bytes32;\ntype externalEuint200 is bytes32;\ntype externalEuint208 is bytes32;\ntype externalEuint216 is bytes32;\ntype externalEuint224 is bytes32;\ntype externalEuint232 is bytes32;\ntype externalEuint240 is bytes32;\ntype externalEuint248 is bytes32;\ntype externalEuint256 is bytes32;\n\ntype externalEint8 is bytes32;\ntype externalEint16 is bytes32;\ntype externalEint24 is bytes32;\ntype externalEint32 is bytes32;\ntype externalEint40 is bytes32;\ntype externalEint48 is bytes32;\ntype externalEint56 is bytes32;\ntype externalEint64 is bytes32;\ntype externalEint72 is bytes32;\ntype externalEint80 is bytes32;\ntype externalEint88 is bytes32;\ntype externalEint96 is bytes32;\ntype externalEint104 is bytes32;\ntype externalEint112 is bytes32;\ntype externalEint120 is bytes32;\ntype externalEint128 is bytes32;\ntype externalEint136 is bytes32;\ntype externalEint144 is bytes32;\ntype externalEint152 is bytes32;\ntype externalEint160 is bytes32;\ntype externalEint168 is bytes32;\ntype externalEint176 is bytes32;\ntype externalEint184 is bytes32;\ntype externalEint192 is bytes32;\ntype externalEint200 is bytes32;\ntype externalEint208 is bytes32;\ntype externalEint216 is bytes32;\ntype externalEint224 is bytes32;\ntype externalEint232 is bytes32;\ntype externalEint240 is bytes32;\ntype externalEint248 is bytes32;\ntype externalEint256 is bytes32;\n\ntype externalEaddress is bytes32;\n\ntype externalEbytes1 is bytes32;\ntype externalEbytes2 is bytes32;\ntype externalEbytes3 is bytes32;\ntype externalEbytes4 is bytes32;\ntype externalEbytes5 is bytes32;\ntype externalEbytes6 is bytes32;\ntype externalEbytes7 is bytes32;\ntype externalEbytes8 is bytes32;\ntype externalEbytes9 is bytes32;\ntype externalEbytes10 is bytes32;\ntype externalEbytes11 is bytes32;\ntype externalEbytes12 is bytes32;\ntype externalEbytes13 is bytes32;\ntype externalEbytes14 is bytes32;\ntype externalEbytes15 is bytes32;\ntype externalEbytes16 is bytes32;\ntype externalEbytes17 is bytes32;\ntype externalEbytes18 is bytes32;\ntype externalEbytes19 is bytes32;\ntype externalEbytes20 is bytes32;\ntype externalEbytes21 is bytes32;\ntype externalEbytes22 is bytes32;\ntype externalEbytes23 is bytes32;\ntype externalEbytes24 is bytes32;\ntype externalEbytes25 is bytes32;\ntype externalEbytes26 is bytes32;\ntype externalEbytes27 is bytes32;\ntype externalEbytes28 is bytes32;\ntype externalEbytes29 is bytes32;\ntype externalEbytes30 is bytes32;\ntype externalEbytes31 is bytes32;\ntype externalEbytes32 is bytes32;\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}